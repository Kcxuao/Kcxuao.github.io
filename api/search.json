[{"id":"2ad3ae89e003a8a229c0b35f48bef705","title":"路由器配置DHCP服务","content":"1. DHCP作用​\t\t主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。\n2. 定义DHCP地址池\n定义地址池名称\nR0(config)#ip dhco pool [name]\n\n指定分配网络范围：网络地址、子网掩码\nR0(dhcp-config)#network [IP网段] [子网掩码]\n\n指定默认网关\nR0(dhcp-config)#default-router [网关]\n\n指定DNS服务器地址\nR0(dhcp-config)#dns-server 114.114.114.114\n\n指定保留地址\nR0(config)#ip dhcp excluded-address [开始IP] [结束IP]\n\n","slug":"路由器配置DHCP服务","date":"2022-08-03T04:46:29.000Z","categories_index":"网络安全,网络设备","tags_index":"网络安全,网络设备","author_index":"Kcxuao"},{"id":"a303a8e7123ba880fb6418bf0fe62527","title":"Webpack5入门","content":"基本使用Webpack 是一个静态资源打包工具。\n它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。\n输出的文件就是编译好的文件，就可以在浏览器段运行了。\n我们将 Webpack 输出的文件叫做 bundle。\n功能介绍Webpack 本身功能是有限的:\n\n开发模式：仅能编译 JS 中的 ES Module 语法\n\n生产模式：能编译 JS 中的 ES Module 语法，还能压缩 JS 代码\n\n\n开始使用1. 资源目录webpack_code # 项目根目录（所有指令必须在这个目录运行）\n    └── src # 项目源码目录\n        ├── js # js文件目录\n        │   ├── count.js\n        │   └── sum.js\n        └── main.js # 项目主文件\n\n\n\n2. 下载依赖打开终端，来到项目根目录。运行以下指令：\n\n初始化package.json\nnpm init -y\n\n​\t\t此时会生成一个基础的 package.json 文件。\n\n下载依赖\nnpm i webpack webpack-cli -D\n\n3. 启用 Webpack\n开发模式\nnpx webpack ./src/main.js --mode=development\n\n生产模式\nnpx webpack ./src/main.js --mode=production\n\n​\t\tnpx webpack: 用于运行本地安装 Webpack 包的。\n​\t\t./src/main.js: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。\n​\t\t--mode=xxx：指定模式（环境）。\n4. 输出文件默认 Webpack 会将文件打包输出到 dist 目录下\n基本配置在开始使用 Webpack 之前，我们需要对 Webpack 的配置有一定的认识。\n1. 5 大核心概念\nentry（入口）\n指示 Webpack 从哪个文件开始打包\n\noutput（输出）\n指示 Webpack 打包完的文件输出到哪里去，如何命名等\n\nloader（加载器）\nwebpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析\n\nplugins（插件）\n扩展 Webpack 的功能\n\nmode（模式）\n\n\n\n开发模式：development\n生产模式：production\n\n2. 准备 Webpack 配置文件\n在项目根目录下新建文件：webpack.config.js\nmodule.exports = &#123;\n  // 入口\n  entry: \"\",\n  // 输出\n  output: &#123;&#125;,\n  // 加载器\n  module: &#123;\n    rules: [],\n  &#125;,\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"\",\n&#125;;\n\nWebpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范\n\n\n3. 修改配置文件\n配置文件\n// Node.js的核心模块，专门用来处理文件路径\nconst path = require(\"path\");\n\nmodule.exports = &#123;\n  // 入口\n  // 相对路径和绝对路径都行\n  entry: \"./src/main.js\",\n  // 输出\n  output: &#123;\n    // path: 文件输出目录，必须是绝对路径\n    // path.resolve()方法返回一个绝对路径\n    // __dirname 当前文件的文件夹绝对路径\n    path: path.resolve(__dirname, \"dist\"),\n    // filename: 输出文件名\n    filename: \"main.js\",\n  &#125;,\n  // 加载器\n  module: &#123;\n    rules: [],\n  &#125;,\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"development\", // 开发模式\n&#125;;\n\n\n\n运行指令\nnpx webpack\n\n​\t\twebpack配置完毕，但此时还并不能处理图片以及css等资源\n处理样式资源介绍Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源\n我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用\n官方文档找不到的话，可以从社区 Github 中搜索查询\nWebpack 官方 Loader 文档open in new window\n处理 Css 资源1. 下载包npm i css-loader style-loader -D\n\n\n\n2. 功能介绍\ncss-loader：负责将 Css 文件编译成 Webpack 能识别的模块\nstyle-loader：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容此时样式就会以 Style 标签的形式在页面上生效\n\n3. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  &#125;,\n  module: &#123;\n    rules: [\n+     &#123;\n       // 用来匹配 .css 结尾的文件\n+       test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n+       use: [\"style-loader\", \"css-loader\"],\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n4. 创建并引入 Css 资源// src/css/index.css\ndiv &#123;\n\twidth: 100px\n&#125;\n\n// src/main.js\nimport './css/index.css'\n\n\n\n5. 运行指令npx webpack\n\n\n\n处理 Less 资源1. 下载包npm i less-loader -D\n\n\n\n2. 功能介绍\nless-loader：负责将 Less 文件编译成 Css 文件\n\n3. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      &#125;,\n+     &#123;\n+       test: /\\.less$/,\n+       use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n4. 添加 Less 资源// src/css/index.less\ndiv &#123;\n\twidth: 100px\n&#125;\n\n// src/main.js\nimport './css/index.less'\n\n\n\n5. 运行指令npx webpack\n\n\n\n处理 Sass 和 Scss 资源1. 下载包npm i sass-loader sass -D\n\n\n\n2. 功能介绍\nsass-loader：负责将 Sass 文件编译成 css 文件\nsass：sass-loader 依赖 sass 进行编译\n\n3. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n+     &#123;\n+       test: /\\.s[ac]ss$/,\n+       use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n4. 添加 Sass 资源// src/css/index.scss | index.sass\ndiv &#123;\n\twidth: 100px\n&#125;\n\n// src/main.js\nimport './css/index.scss'\nimport './css/index.sass'\n\n\n\n5.运行指令npx webpack\n\n\n\n处理 Stylus 资源1. 下载包npm i stylus-loader -D\n\n\n\n2. 功能介绍\nstylus-loader：负责将 Styl 文件编译成 Css 文件\n\n3. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n+     &#123;\n+       test: /\\.styl$/,\n+       use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n4. 添加 Styl 资源// src/css/index.styl\ndiv &#123;\n\twidth: 100px\n&#125;\n\n// src/main.js\nimport './css/index.styl'\n\n\n\n5. 运行指令npx webpack\n\n\n\n\n\n处理图片资源过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理\n现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源\n1. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n+     &#123;\n+       test: /\\.(png|jpe?g|gif|webp)$/,\n+       type: \"asset\",\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n2. 添加使用图片资源/* src/css/index.css */\ndiv &#123;\n\twidth: 100px;\n\theight: 100px;\n\tbackground: url('./src/assets/images/1.png')\n&#125;\n\n\n\n3. 运行指令npx webpack\n\n\n\n4. 输出资源情况此时如果查看 dist 目录的话，会发现多了三张图片资源\n因为 Webpack 会将所有打包好的资源输出到 dist 目录下\n为什么样式资源没有呢？\n因为经过 style-loader 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来\n5. 对图片资源进行优化将小于某个大小的图片转化成 data URI 形式（Base64 格式）\nconst path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n+       parser: &#123;\n+         dataUrlCondition: &#123;\n+           maxSize: 10 * 1024 // 小于10kb的图片会被base64处理\n+         &#125;\n+       &#125;\n      &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n优点：减少请求数量\n\n缺点：体积变得更大\n此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中\n\n\n修改输出资源的名称和路径1. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"dist\"),\n+   filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n+       generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n+         filename: \"static/imgs/[hash:8][ext][query]\",\n+       &#125;,\n      &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n2. 输出文件目录├── dist\n    └── static\n         ├── imgs\n         │    └── 7003350e.png\n         └── js\n              └── main.js\n\n\n\n自动清空上次打包资源1. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\",\n+   clean: true, // 自动将上次打包目录资源清空\n  &#125;,\n  module: &#123;\n    rules: []\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n处理字体图标资源1. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n+     &#123;\n+       test: /\\.(ttf|woff2?)$/,\n+       type: \"asset/resource\",\n+       generator: &#123;\n+         filename: \"static/media/[hash:8][ext][query]\",\n+       &#125;,\n+     &#125;,\n    ],\n  &#125;,\n&#125;;\n\ntype: &quot;asset/resource&quot;  和 type: &quot;asset&quot;的区别：\n\ntype: &quot;asset/resource&quot; 相当于file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理\ntype: &quot;asset&quot; 相当于url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式\n\n处理其他资源开发中可能还存在一些其他资源，如音视频等\n1. 配置const path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n      &#123;\n+       test: /\\.(ttf|woff2?|mp4|mp3|avi)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n\n\n\n\n处理 js 资源有人可能会问，js 资源 Webpack 不能已经处理了吗，为什么我们还要处理呢？\n原因是 Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在 IE 等浏览器运行，所以我们希望做一些兼容性处理。\n其次开发中，团队对代码格式是有严格要求的，我们不能由肉眼去检测代码格式，需要使用专业的工具来检测。\n\n针对 js 兼容性处理，我们使用 Babel 来完成\n针对代码格式，我们使用 Eslint 来完成\n\n我们先完成 Eslint，检测代码格式无误后，在由 Babel 做代码兼容性处理\nEslint可组装的 JavaScript 和 JSX 检查工具。\n这句话意思就是：它是用来检测 js 和 jsx 语法的工具，可以配置各项功能\n我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查\n1. 配置文件配置文件由很多种写法：\n.eslintrc.*\n\n\n\n\n新建文件，位于项目根目录\n\n.eslintrc\n.eslintrc.js\n.eslintrc.json\n区别在于配置格式不一样\n\n\npackage.json 中 eslintConfig：不需要创建文件，在原有文件基础上写\n\n\nESLint 会查找和自动读取它们，所以以上配置文件只需要存在一个即可\n2. 具体配置\n以 .eslintrc.js 配置文件为例：\nmodule.exports = &#123;\n  // 解析选项\n  parserOptions: &#123;&#125;,\n  // 具体检查规则\n  rules: &#123;&#125;,\n  // 继承其他规则\n  extends: [],\n  // ...\n  // 其他规则详见：https://eslint.bootcss.com/docs/user-guide/configuring\n&#125;;\n\n\nparserOptions 解析选项\nparserOptions: &#123;\n  ecmaVersion: 6, // ES 语法版本\n  sourceType: \"module\", // ES 模块化\n  ecmaFeatures: &#123; // ES 其他特性\n    jsx: true // 如果是 React 项目，就需要开启 jsx 语法\n  &#125;\n&#125;\n\n\n\nrules 具体规则\n\n\n\n&quot;off&quot; 或 0 - 关闭规则\n\n&quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n\n&quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\nrules: &#123;\n  semi: \"error\", // 禁止使用分号\n  'array-callback-return': 'warn', // 强制数组方法的回调函数中有 return 语句，否则警告\n  'default-case': [\n    'warn', // 要求 switch 语句中有 default 分支，否则警告\n    &#123; commentPattern: '^no default$' &#125; // 允许在最后注释 no default, 就不会有警告了\n  ],\n  eqeqeq: [\n    'warn', // 强制使用 === 和 !==，否则警告\n    'smart' // https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告\n  ],\n&#125;\n\n​\t\t更多规则详见：规则文档open in new window\n\nextends 继承\n\n​\t\t开发中一点点写 rules 规则太费劲了，所以有更好的办法，继承现有的规则。\n​\t\t现有以下较为有名的规则：\n\nEslint 官方的规则open in new window：eslint:recommended\n\nVue Cli 官方的规则open in new window：plugin:vue/essential\n\nReact Cli 官方的规则open in new window：react-app\n// 例如在React项目中，我们可以这样写配置\nmodule.exports = &#123;\n  extends: [\"react-app\"],\n  rules: &#123;\n    // 我们的规则会覆盖掉react-app的规则\n    // 所以想要修改规则直接改就是了\n    eqeqeq: [\"warn\", \"smart\"],\n  &#125;,\n&#125;;\n\n3. 在 Webpack 中使用\n下载包\nnpm i eslint-webpack-plugin eslint -D\n\n\n\n定义 Eslint 配置文件\n\n\n\n.eslintrc.js\nmodule.exports = &#123;\n  // 继承 Eslint 规则\n  extends: [\"eslint:recommended\"],\n  env: &#123;\n    node: true, // 启用node中全局变量\n    browser: true, // 启用浏览器中全局变量\n  &#125;,\n  parserOptions: &#123;\n    ecmaVersion: 6,\n    sourceType: \"module\",\n  &#125;,\n  rules: &#123;\n    \"no-var\": 2, // 不能使用 var 定义变量\n  &#125;,\n&#125;;\n\n\n\n配置\n\n\nwebpack.config.js\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\n\nmodule.exports = &#123;\n  plugins: [\n+   new ESLintWebpackPlugin(&#123;\n     // 指定检查文件的根目录\n+     context: path.resolve(__dirname, \"src\"),\n+   &#125;),\n  ],\n  mode: \"development\",\n&#125;;\n\n4. VSCode Eslint 插件打开 VSCode，下载 Eslint 插件，即可不用编译就能看到错误，可以提前解决\n但是此时就会对项目所有文件默认进行 Eslint 检查了，我们 dist 目录下的打包后文件就会报错。但是我们只需要检查 src 下面的文件，不需要检查 dist 下面的文件。\n所以可以使用 Eslint 忽略文件解决。在项目根目录新建下面文件:\n\n.eslintignore\n# 忽略dist目录下所有文件\ndist\n\nBabelJavaScript 编译器。\n主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中\n1. 配置文件配置文件由很多种写法：\n\nbabel.config.*\n\n  ：新建文件，位于项目根目录\n\n  - &#96;babel.config.js&#96;\n  - &#96;babel.config.json&#96;\n\n- &#96;&#96;&#96;js\n  .babelrc.*\n\n：新建文件，位于项目根目录\n\n- `.babelrc`\n- `.babelrc.js`\n- `.babelrc.json`\n\n\npackage.json 中 babel：不需要创建文件，在原有文件基础上写\n\n\nBabel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可\n2. 具体配置\n我们以 babel.config.js 配置文件为例：\nmodule.exports = &#123;\n  // 预设\n  presets: [],\n&#125;;\n\npresets 预设\n简单理解：就是一组 Babel 插件, 扩展 Babel 功能\n\n@babel/preset-env: 一个智能预设，允许您使用最新的 JavaScript。\n@babel/preset-react：一个用来编译 React jsx 语法的预设\n@babel/preset-typescript：一个用来编译 TypeScript 语法的预设\n\n3. 在 Webpack 中使用\n下载包\nnpm i babel-loader @babel/core @babel/preset-env -D\n\n\n\n定义 Babel 配置文件\n\n\n\nbabel.config.js\nmodule.exports = &#123;\n  presets: [\"@babel/preset-env\"],\n&#125;;\n\n\n配置\n\n\nwebpack.config.js\nconst path = require(\"path\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n+     &#123;\n+       test: /\\.js$/,\n+       exclude: /node_modules/, // 排除node_modules代码不编译\n+       loader: \"babel-loader\",\n+     &#125;,\n    ],\n  &#125;,\n  plugins: [],\n  mode: \"development\",\n&#125;;\n\n处理 Html 资源1. 下载包npm i html-webpack-plugin -D\n\n\n\n2. 配置\nwebpack.config.js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = &#123;\n  plugins: [\n+   new HtmlWebpackPlugin(&#123;\n     // 以 public/index.html 为模板创建文件\n     // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n+     template: path.resolve(__dirname, \"public/index.html\"),\n+   &#125;),\n  ],\n  mode: \"development\",\n&#125;;\n\n3. 修改 index.html去掉引入的 js 文件，因为 HtmlWebpackPlugin 会自动引入\n开发服务器&amp;自动化每次写完代码都需要手动输入指令才能编译代码，太麻烦了，我们希望一切自动化\n1. 下载包npm i webpack-dev-server -D\n\n\n\n2. 配置module.exports = &#123;\n  // 开发服务器\n  devServer: &#123;\n    host: \"localhost\", // 启动服务器域名\n    port: \"3000\", // 启动服务器端口号\n    open: true, // 是否自动打开浏览器\n  &#125;,\n  mode: \"development\",\n&#125;;\n\n\n\n3. 运行指令npx webpack serve\n\n注意运行指令发生了变化\n并且当你使用开发服务器时，所有代码都会在内存中编译打包，并不会输出到 dist 目录下。\n开发时我们只关心代码能运行，有效果即可，至于代码被编译成什么样子，我们并不需要知道。\n生产模式介绍生产模式是开发完成代码后，我们需要得到代码将来部署上线。\n这个模式下我们主要对代码进行优化，让其运行性能更好。\n优化主要从两个角度出发:\n\n优化代码运行性能\n\n优化代码打包速度\n\n\n生产模式准备我们分别准备两个配置文件来放不同的配置\n1. 文件目录├── demo (项目根目录)\n    ├── config (Webpack配置文件目录)\n    │    ├── webpack.dev.js(开发模式配置文件)\n    │    └── webpack.prod.js(生产模式配置文件)\n    ├── node_modules (下载包存放目录)\n    ├── src (项目源码目录，除了html其他都在src里面)\n    │    └── 略\n    ├── public (项目html文件)\n    │    └── index.html\n    ├── .eslintrc.js(Eslint配置文件)\n    ├── babel.config.js(Babel配置文件)\n    └── package.json (包的依赖管理配置文件)\n\n\n\n2. 修改 webpack.dev.js因为文件目录变了，所以所有绝对路径需要回退一层目录才能找到对应的文件\nconst path = require(\"path\");\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n+   path: undefined, // 开发模式没有输出，不需要指定输出目录\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n-   // clean: true, // 开发模式没有输出，不需要清空输出结果\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n        generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.js$/,\n        exclude: /node_modules/, // 排除node_modules代码不编译\n        loader: \"babel-loader\",\n      &#125;,\n    ],\n  &#125;,\n  plugins: [\n    new ESLintWebpackPlugin(&#123;\n      // 指定检查文件的根目录\n+     context: path.resolve(__dirname, \"../src\"),\n    &#125;),\n    new HtmlWebpackPlugin(&#123;\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n+     template: path.resolve(__dirname, \"../public/index.html\"),\n    &#125;),\n  ],\n  // 其他省略\n  devServer: &#123;\n    host: \"localhost\", // 启动服务器域名\n    port: \"3000\", // 启动服务器端口号\n    open: true, // 是否自动打开浏览器\n  &#125;,\n  mode: \"development\",\n&#125;;\n\n\n\n运行开发模式的指令\nnpx webpack serve --config ./config/webpack.dev.js\n\n\n\n3. 修改 webpack.prod.jsconst path = require(\"path\");\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n+   path: path.resolve(__dirname, \"../dist\"), // 生产模式需要输出\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n+   clean: true,\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      &#125;,\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n        generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.js$/,\n        exclude: /node_modules/, // 排除node_modules代码不编译\n        loader: \"babel-loader\",\n      &#125;,\n    ],\n  &#125;,\n  plugins: [\n    new ESLintWebpackPlugin(&#123;\n      // 指定检查文件的根目录\n+     context: path.resolve(__dirname, \"../src\"),\n    &#125;),\n    new HtmlWebpackPlugin(&#123;\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n+     template: path.resolve(__dirname, \"../public/index.html\"),\n    &#125;),\n  ],\n- // devServer: &#123;\n- //   host: \"localhost\", // 启动服务器域名\n- //   port: \"3000\", // 启动服务器端口号\n- //   open: true, // 是否自动打开浏览器\n- // &#125;,\n  mode: \"production\",\n&#125;;\n\n\n\n运行生产模式的指令\nnpx webpack --config ./config/webpack.prod.js\n\n\n\n4. 配置运行指令为了方便运行不同模式的指令，我们将指令定义在 package.json 中 scripts 里面\n// package.json\n&#123;\n  // 其他省略\n  \"scripts\": &#123;\n    \"start\": \"npm run dev\",\n    \"dev\": \"npx webpack serve --config ./config/webpack.dev.js\",\n    \"build\": \"npx webpack --config ./config/webpack.prod.js\"\n  &#125;\n&#125;\n\n\n\n以后启动指令：\n\n开发模式：npm start 或 npm run dev\n生产模式：npm run build\n\nCss 处理提取 Css 成单独文件Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式\n这样对于网站来说，会出现闪屏现象，用户体验不好\n我们应该是单独的 Css 文件，通过 link 标签加载性能才好\n1. 下载包npm i mini-css-extract-plugin -D\n\n\n\n2. 配置  const path = require(\"path\");\n+ const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nmodule.exports = &#123;\n  plugins: [\n    // 提取css成单独文件\n+   new MiniCssExtractPlugin(&#123;\n      // 定义输出文件名和目录\n+     filename: \"static/css/main.css\",\n+   &#125;),\n  ],\n  mode: \"production\",\n&#125;;\n\n\n\n3. 运行指令npm run build\n\n\n\nCss 兼容性处理1. 下载包npm i postcss-loader postcss postcss-preset-env -D\n\n\n\n2. 配置\nwebpack.prod.js\n\nconst path = require(\"path\");\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nmodule.exports = &#123;\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\",\n+         &#123;\n+           loader: \"postcss-loader\",\n+           options: &#123;\n+             postcssOptions: &#123;\n+               plugins: [\n+                 \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n+               ],\n+             &#125;,\n+           &#125;,\n+         &#125;,\n        ],\n      &#125;,\n      &#123;\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\",\n+         &#123;\n+           loader: \"postcss-loader\",\n+           options: &#123;\n+             postcssOptions: &#123;\n+               plugins: [\n+                 \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n+               ],\n+             &#125;,\n+           &#125;,\n+         &#125;,\n          \"less-loader\",\n        ],\n      &#125;,\n      &#123;\n        test: /\\.s[ac]ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\",\n+         &#123;\n+           loader: \"postcss-loader\",\n+           options: &#123;\n+             postcssOptions: &#123;\n+               plugins: [\n+                 \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n+               ],\n+             &#125;,\n+           &#125;,\n+         &#125;,\n          \"sass-loader\",\n        ],\n      &#125;,\n      &#123;\n        test: /\\.styl$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\",\n+         &#123;\n+           loader: \"postcss-loader\",\n+           options: &#123;\n+             postcssOptions: &#123;\n+               plugins: [\n+                 \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n+               ],\n+             &#125;,\n+           &#125;,\n+         &#125;,\n          \"stylus-loader\",\n        ],\n      &#125;,\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n        generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.js$/,\n        exclude: /node_modules/, // 排除node_modules代码不编译\n        loader: \"babel-loader\",\n      &#125;,\n    ],\n  &#125;,\n  plugins: [\n    new ESLintWebpackPlugin(&#123;\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"../src\"),\n    &#125;),\n    new HtmlWebpackPlugin(&#123;\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n      template: path.resolve(__dirname, \"../public/index.html\"),\n    &#125;),\n    // 提取css成单独文件\n    new MiniCssExtractPlugin(&#123;\n      // 定义输出文件名和目录\n      filename: \"static/css/main.css\",\n    &#125;),\n  ],\n  // devServer: &#123;\n  //   host: \"localhost\", // 启动服务器域名\n  //   port: \"3000\", // 启动服务器端口号\n  //   open: true, // 是否自动打开浏览器\n  // &#125;,\n  mode: \"production\",\n&#125;;\n\n\n\n3. 控制兼容性我们可以在 package.json 文件中添加 browserslist 来控制样式的兼容性做到什么程度。\n&#123;\n  // 其他省略\n  \"browserslist\": [\"ie >= 8\"]\n&#125;\n\n\n\n想要知道更多的 browserslist 配置，查看browserslist 文档open in new window\n以上为了测试兼容性所以设置兼容浏览器 ie8 以上。\n实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：\n&#123;\n  // 其他省略\n  \"browserslist\": [\"last 2 version\", \"> 1%\", \"not dead\"]\n&#125;\n\n\n\n4. 合并配置\nwebpack.prod.js\n\nconst path = require(\"path\");\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\n// 获取处理样式的Loaders\nconst getStyleLoaders = (preProcessor) => &#123;\n  return [\n    MiniCssExtractPlugin.loader,\n    \"css-loader\",\n    &#123;\n      loader: \"postcss-loader\",\n      options: &#123;\n        postcssOptions: &#123;\n          plugins: [\n            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n          ],\n        &#125;,\n      &#125;,\n    &#125;,\n    preProcessor,\n  ].filter(Boolean);\n&#125;;\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"../dist\"), // 生产模式需要输出\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true,\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: getStyleLoaders(),\n      &#125;,\n      &#123;\n        test: /\\.less$/,\n        use: getStyleLoaders(\"less-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.s[ac]ss$/,\n        use: getStyleLoaders(\"sass-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.styl$/,\n        use: getStyleLoaders(\"stylus-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n        generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.js$/,\n        exclude: /node_modules/, // 排除node_modules代码不编译\n        loader: \"babel-loader\",\n      &#125;,\n    ],\n  &#125;,\n  plugins: [\n    new ESLintWebpackPlugin(&#123;\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"../src\"),\n    &#125;),\n    new HtmlWebpackPlugin(&#123;\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n      template: path.resolve(__dirname, \"../public/index.html\"),\n    &#125;),\n    // 提取css成单独文件\n    new MiniCssExtractPlugin(&#123;\n      // 定义输出文件名和目录\n      filename: \"static/css/main.css\",\n    &#125;),\n  ],\n  // devServer: &#123;\n  //   host: \"localhost\", // 启动服务器域名\n  //   port: \"3000\", // 启动服务器端口号\n  //   open: true, // 是否自动打开浏览器\n  // &#125;,\n  mode: \"production\",\n&#125;;\n\n\n\n5. 运行指令npm run build\n\n\n\nCss 压缩1. 下载包npm i css-minimizer-webpack-plugin -D\n\n\n\n2. 配置\nwebpack.prod.js\n\nconst path = require(\"path\");\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\n\n// 获取处理样式的Loaders\nconst getStyleLoaders = (preProcessor) => &#123;\n  return [\n    MiniCssExtractPlugin.loader,\n    \"css-loader\",\n    &#123;\n      loader: \"postcss-loader\",\n      options: &#123;\n        postcssOptions: &#123;\n          plugins: [\n            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\n          ],\n        &#125;,\n      &#125;,\n    &#125;,\n    preProcessor,\n  ].filter(Boolean);\n&#125;;\n\nmodule.exports = &#123;\n  entry: \"./src/main.js\",\n  output: &#123;\n    path: path.resolve(__dirname, \"../dist\"), // 生产模式需要输出\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true,\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: getStyleLoaders(),\n      &#125;,\n      &#123;\n        test: /\\.less$/,\n        use: getStyleLoaders(\"less-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.s[ac]ss$/,\n        use: getStyleLoaders(\"sass-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.styl$/,\n        use: getStyleLoaders(\"stylus-loader\"),\n      &#125;,\n      &#123;\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: &#123;\n          dataUrlCondition: &#123;\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          &#125;,\n        &#125;,\n        generator: &#123;\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: &#123;\n          filename: \"static/media/[hash:8][ext][query]\",\n        &#125;,\n      &#125;,\n      &#123;\n        test: /\\.js$/,\n        exclude: /node_modules/, // 排除node_modules代码不编译\n        loader: \"babel-loader\",\n      &#125;,\n    ],\n  &#125;,\n  plugins: [\n    new ESLintWebpackPlugin(&#123;\n      // 指定检查文件的根目录\n      context: path.resolve(__dirname, \"../src\"),\n    &#125;),\n    new HtmlWebpackPlugin(&#123;\n      // 以 public/index.html 为模板创建文件\n      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源\n      template: path.resolve(__dirname, \"../public/index.html\"),\n    &#125;),\n    // 提取css成单独文件\n    new MiniCssExtractPlugin(&#123;\n      // 定义输出文件名和目录\n      filename: \"static/css/main.css\",\n    &#125;),\n    // css压缩\n    new CssMinimizerPlugin(),\n  ],\n  // devServer: &#123;\n  //   host: \"localhost\", // 启动服务器域名\n  //   port: \"3000\", // 启动服务器端口号\n  //   open: true, // 是否自动打开浏览器\n  // &#125;,\n  mode: \"production\",\n&#125;;\n\n\n\n3. 运行指令npm run build\n\n\n\nhtml 压缩默认生产模式已经开启了：html 压缩和 js 压缩\n不需要额外进行配置\n","slug":"Webpack5入门","date":"2022-08-02T03:27:42.000Z","categories_index":"web前端,webpack","tags_index":"web前端,Webpack5","author_index":"Kcxuao"},{"id":"f6aa9055047ecd5961d22737b80b722d","title":"Typora破解流程","content":"前言\n\n\n\n\n\n\n\n\nTypora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是\t完全免费的。Typora 是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。\n\n\n\n\n\n\n\n\n\n11月23日，Typora 正式发布 1.0 版本，进入了收费时代。1.0 版本是一次性付费而非订阅的，只要支付人民币 89 元，可以在 3 台设备里使用。\n\n\n\n\n\n\n\n\n\n作为一个习惯使用Typora的人来说无异于晴天霹雳，有心支持正版，但是囊中羞涩，只好另谋出路。在使用了其他Markdown编辑器后总觉得有一些不对味，于是目光又重新看向Typora\n\n\n\n\n\n\n\n\n警告⚠️\n\n请勿使用盗版，支持正版授权。 文中内容仅作学习和讨论，请不要从事任何非法行为。 由此产生的任何问题都将读者/用户（您）承担。\n\n\n\n\n寻查日志\n首先我是想通过查看日志的方式，看看日志中是否存在license的验证过程信息。\n\n\n\n\n启动Typora，通过活动监视器查看Typora运行中操作的文件\n\n\n\n\n\n双击打开Typora，进入 打开的文件和端口选项 ，搜索一下日志信息\n\n\n\n\n\n\n\n找到两个日志文件，打开看一下\n\n\n发现两个文件都是空白的，没有什么用处，看来从日志下手是没有什么进展了，只能再另辟蹊径。\n寻查代码既然日志里不存在license,那么有可能存在于js的代码中，尝试在全局搜索一下license字段\n\n进入显示包，搜索一下license\n\n\n\n\n\n这里找到了两个js文件，在vscode里面打开看看,格式化一下代码，使代码拥有可读性\n\n\n\n\n\n继续在代码里面搜查license字段\n\n\n​\t\t  找到了34个结果\n\n发现了两个可疑参数\n\n\n​\t\tuseState翻译意思是：使用状态，而hasActivated是已激活的意思\n\n查找一下hasActivated字段\n\n\n\n\n\n找到三项，继续查看，发现可疑代码\n\n\n这句代码的意思是判断激活状态是否为 true \n\n尝试将e.hasActivated修改为  true \n\n\n\n\n\n再次回到Typora页面，显示已激活\n\n\n总结&#x2F;&#x2F; 打开Typora.app&#x2F;Contents&#x2F;Resources&#x2F;TypeMark&#x2F;page-dist&#x2F;static&#x2F;js&#x2F;LicenseIndex.180dd4c7.5dc16d09.chunk.js文件，修改代码 e.hasActivated 为 true 即可激活成功\n\n&#x2F;&#x2F;e.hasActivated &#x3D; &quot;true&quot; &#x3D;&#x3D; e.hasActivated\ne.hasActivated &#x3D; &quot;true&quot; &#x3D;&#x3D; &quot;true&quot;\n\n","slug":"Typora破解流程","date":"2022-07-08T03:42:53.000Z","categories_index":"网络安全,软件分享","tags_index":"网络安全,软件分享","author_index":"Kcxuao"},{"id":"5a2a5d9069f5f41c9d10477bc9392472","title":"TS学习笔记----TS类型","content":"\n\n\n\n\n\n为什么要学TS？\n\nts是js的超集，存在类型的脚本语言\n继承了js的所有编程类型，学过es6可以无缝衔接ts\n为构建大型应用而生，但小程序同样适用\n强大的类型系统，拥有静态类型检查能力\n新增类型注解和类型推断\n拥有丰富的class扩展功能\n添加了系统级设计能力，设计模式由顶层由下进行设计\n\n\n\n\n类型\n\n\n\n类型\n含义\n写法\n\n\n\nnumber\n数字\nlet a: number\n\n\nstring\n字符串\nlet a: string      | let a &#x3D; ‘’\n\n\nboolean\n布尔值\nlet a: boolean | let a &#x3D; true\n\n\nany\n所有类型（不建议使用）\nlet a: any         | let a\n\n\nunknown\n所有类型（建议使用）\nlet a: unknown\n\n\nvoid\n无返回值\nfunction a (): void {}\n\n\nnever\n永远无返回值\nfunction a (): never {}\n\n\nobject\n对象\nlet a: object  | let a &#x3D; {}\n\n\nArray\n数组\nlet a: Array  | let a: number[]\n\n\nTuple\n元组（固定长度数组）\nlet a: [string, number]\n\n\nenum\n枚举\nenum gender { male, female }\n\n\n\n\n基本类型\n数字(Number)ts中数字支持二进制、八进制、十进制、十六进制字面量\nlet num1: number = 0b1010\t\t// 二进制\nlet num2: number = 0o12  \t\t// 八进制\nlet num3: number = 10   \t\t// 十进制\nlet num4: number = 0xa   \t\t// 十六进制\n\n字符串(String)可以使用双引号（&quot;）或单引号（&#39;）表示字符串。\nlet name: string = '张三'\nname = '李四'\n\n布尔值(Boolean)最基本的数据类型，只有 true &#x2F;  false 两个值\nlet isNum: boolean = false\nisNum = true\n\nany AND unknown有时候我们并不清楚一个变量的类型，它的类型可能是一个动态的内容。我们希望不对它进行类型检查直接通过编译时可以采用 any 类型\nlet a: any = 1\na = '1'\na = true\n...\n\nunknown的用法和any一致，不同的是  unknown 可以保证类型安全，而 any 放弃了类型检查 ，unkonwn 则必须要在判断完它是什么类型后才能继续使用，我们可以通过  类型断言 的方式指定变量的类型\nlet a: unknown = '123';\na.split('') // error 类型“unknown”上不存在属性“split”\n\n(&lt;string>a).split('') | (a as string).split('') // ok\n\nvoid AND nevervoid 表示没有任何类型。 通常用在函数上，当一个函数没有返回值时，函数返回值类型是 void \nfunction fn(): void &#123;&#125;\n\nvoid 也可以用在变量上，但通常没什么意义，因为你只能为它赋予 undefined 和 null\nlet a: void = 1    // error 不能将类型“number”分配给类型“void”\nlet a: void = null // ok\n\nnever 表示永远不会有返回值。与void 不同的是， void 可以赋予  undefined 和 null ，函数的默认返回值是 undefined ，而 never 并不能返回任何的值，它可以用作异常抛出\nfunction fn(): never &#123;&#125; //error 返回“从不”的函数不能具有可访问的终结点。\n\nfunction fn(): never &#123;\n// 可以用作异常抛出\n  throw new Error('error')\n&#125;\n\n对象(Object)除 number，string，boolean之外的类型，与js对象没有差别\nlet obj: object = &#123;&#125;\n\n数组(Array)声明数组也需要定义数组类型，定义后数组中只能存储类型约束的值\nts中存在两种定义数组的方式：\n// 方法一\nlet list1: number[] = [1, 2, 3]   // 该数组中只能存储数字\nlet list1: number[] = [1, 2, '3'] // error\n\n// 方法二：泛型\nlet list2: Array&lt;number> = [1, 2, 3]\n\n元组(Tuple)元组同数组一样，元组可以存储的数据是 固定 的，数据类型可以不一致\nlet t1 = [number, string]\n\nt1 = [1,'1']      // ok\nt1 = ['1', 1]     // error\nt1 = [1, '1', 2]  // error\n\n枚举(enum)枚举数值默认从0开始依次递增\n根据特定的名称得到对应的枚举数值\nenum gender &#123;\n\t// 声明一个枚举  \n  male,  // 0\n  female // 1\n&#125;\n\nconsole.log(gender.male) // 0\nconsole.log(gender[0])   // male\n\n我们可以手动为枚举赋值索引\nenum gender &#123;\n\t// 声明一个枚举  \n  male = 10,  // 10\n  female      // 11\n&#125;\n\nconsole.log(gender[11])   // female\n\n或是手动为所有索引赋值\nenum gender &#123;\n\t// 声明一个枚举  \n  male = 10,      // 10\n  female = 20     // 20\n&#125;\n\nconsole.log(gender.male)    // 10\nconsole.log(gender[20])   \t// female\n\n联合类型使用 ｜ 分割多种类型\n取值可以为多种类型中的一种\nlet a: string | number\na = 1 \t// ok\na = '1' // ok\n\n类型推断TS会在没有明确的指定类型的时候推测出一个类型有2种情况: 1. 定义变量时赋值了, 推断为对应的类型. 2. 定义变量时没有赋值, 推断为any类型\n// 赋值情况\nlet a = 123   // number\na = '123'     // error\n\n// 未赋值情况\nlet a         // any\na = '123'\na = 123\n\n","slug":"TS学习笔记----TS类型","date":"2022-07-07T03:55:03.000Z","categories_index":"web前端,TS学习笔记","tags_index":"web前端,TS学习笔记","author_index":"Kcxuao"},{"id":"2224ddd5978c9eca615a41bf4b8f087c","title":"MAC安装BurpSuit Pro","content":"前言今天重装了一下系统，导入快照的时候发现缺少了Burp，无奈只能重新下载安装。\n\n安装JavaBurp是基于Java环境的，首先我们需要安装java环境打开java官网\n我的电脑上已经存在java环境了，这里就不再赘述，需要的可以自行百度安装方法\n安装Burpsuit Pro1. 在官网安装最新的版本官方下载地址：https://portswigger.net/burp/releases\n\n\n​\t\t我是m1版本的电脑，所以这里我选择的是arm&#x2F;m1版本\n2. 安装完成后打开，提示我们需要输入许可证\n\n​\t\t关闭程序，开始绕过\n绕过注册网上大部分教学都是需要安装注册机进行绕过，每次启动都需要通过注册机运行，显得有些麻烦。\n我们这次选择一种新的方式进行启动，省去了每次启动程序都需要先打开注册机的繁琐操作\n1. 安装注册机与汉化包\n\n\n\n\n\nTIP\n\n安装地址：蓝奏云\n\n\n\n2. 将文件放入指定位置\n解压后将这三个文件粘贴到 &#x2F;Contents&#x2F;Resources&#x2F;app 目录下\n\n解压压缩包\n\n\n\n\n打开Burp显示包\n\n\n\n\n将解压后的文件粘贴至app目录下\n\n\n\n\n\n修改 &#x2F;Contents&#x2F;vmoptions.txt， 覆盖原本内容\n  # Enter one VM parameter per line\n# For example, to adjust the maximum memory usage to 512 MB, uncomment the following line:\n# -Xmx512m\n# To include another file, uncomment the following line:\n# -include-options [path to other .vmoption file]\n\n-noverify\n-javaagent:BurpSuiteLoader.jar\n-javaagent:BurpSuiteCn.jar\n-Dfile.encoding&#x3D;utf-8\n-XX:MaxRAMPercentage&#x3D;50\n-include-options user.vmoptions\n\n完成在程序坞中打开Burp， 这时已经可以正常打开，并且显示的也是汉化版本\n\n\n​\t\t\n注意\n\n\n\n\n\nTIP\n在新版的Burp中内置了谷歌浏览器，可以在这浏览器中完成抓包操作。\n抓取https无需再安装CA证书\n\n\n打开方法\n  \n\n\n数据包抓取成功\n","slug":"MAC安装BurpSuit Pro","date":"2022-07-04T05:12:54.000Z","categories_index":"网络安全,软件分享","tags_index":"网络安全,软件分享","author_index":"Kcxuao"},{"id":"818194b7b3f4262e361f3508ad11fd84","title":"Vue2使用moment处理时间戳","content":"\n\n\n\n\n\nPreface\n在前端开发中经常会遇到需要格式化时间戳的场景，但是原生js写起来略显复杂为了追求效率，我们可以选择一些第三方库来提高开发效率所以我们可以使用 moment 来处理时间戳\n\n\n\n1.安装moment.jsnpm install moment\n\n\n\n2.在组件中导入moment&lt;script>\n  import moment from 'moment'\n  export default &#123;&#125;\n&lt;/script>\n\n\n\n3.创建过滤器&lt;script>\n  import moment from 'moment'\n  export default &#123;\n    filters: &#123;\n      /*\n      * val: 需要处理的时间戳\n      * format('时间格式') \n      */\n    \tdateTime(val) &#123;\n      \treturn moment(val).format('YYYY-MM-DD HH:mm:ss')\n    \t&#125;\n  \t&#125;\n  &#125;\n&lt;/script>\n\n\n\n4.在HTML文档中处理时间戳&lt;!-- 通过插槽获取时间戳并使用过滤器处理时间戳 -->\n&lt;template slot-scope=\"&#123;row&#125;\">\n  &#123;&#123; row.add_time | dateTime &#125;&#125;\n&lt;/template>\n\n","slug":"Vue使用moment处理时间戳","date":"2022-06-30T12:30:14.000Z","categories_index":"WEB前端,Vue","tags_index":"前端,Vue","author_index":"Kcxuao"},{"id":"00e1daa9b6e7a95a8a71dff2678dcf11","title":"交换机基本配置","content":"交换机的基本配置1.掌握思科设备的命令行基础\n2.会对交换机进行基本配置\n会通过telnet和ssh对交换机进行远程管理\n一、思科设备命令行基础1.进入设备的命令行界面\n设备支持命令行\n查看设备上的端口，是否有console\n\n\n需要console线\n需要超级终端等软件连接\nputty\nsecret CRT\nxshell\n\n\n\n2.命令行基础\n思科设备上的命令行模式\n用户模式：查看统计信息（用的很少），用 “&gt;” 表示\n\n用户模式切换至特权模式\nSwitch&gt;enable\nen\t\t\t\t\t#简写\n\n\n特权模式：查看并修改设备配置（查看居多），用 “#” 表示\n\n特权模式切换至全局模式\nSwitch#configure terminal\nconf t\t\t#简写\n\n\n全局模式：针对设备整体配置参数，用“config”表示\n\n全局模式切换至接口模式\nSwitch(config)#interface [f0&#x2F;1]\nint [f0&#x2F;1]\t#简写\n\n\n接口模式：针对设备接口配置参数，用“config-if”表示\n\n控制台模式，用“config-line”表示\n\n全局模式切换至控制台模式\nSwitch(config)#line console 0\n\n\n注意\n\n进入对应模式只能一级一级进入\n\n返回对应模式\nexit\t\t#一级一级返回\nend\t\t\t#快速返回特权模式\n\n命令输入错误后会进入解析模式\nSwitch(config)#no ip domain-lookup \t\t#永不进行域名解析\n\n\n\n\n\n3.常见配置\n配置交换机主机名\nSwitch(config)#hostname\t[name]\t\t#设置交换机名\n\n查看MAC地址表\nSwitch#show mac-address-table \t\t#查看MAC地址表\n\n交换机双工模式查看与设置\nSwitch(config-if)#duplex ?                  #查看命令\n  auto  Enable AUTO duplex configuration    #自适应双工模式\n  full  Force full duplex operation         #全双工模式\n  half  Force half-duplex operation         #半双工模式\n  \nSwitch#show int [f0&#x2F;1]\t\t                #查看双工模式\n\n交换机接口速率\nSwitch(config-if)#speed ?\n\t10    Force 10 Mbps operation\t            #10Mb&#x2F;s\n  100   Force 100 Mbps operation\t\t        #100Mb&#x2F;s\n  1000  Force 100 Mbps operation\t\t        #1000Mb&#x2F;s\n  auto  Enable AUTO speed configuration\t\t\t#自适应速率\n\n配置console接口密码\nSwitch(config-line)#password [123]    #设置密码\nSwitch(config-line)#login             #启用登录\n\n查看配置文件\nSwitch#show running-config \t\t\t\t\t#查看内存中配置文件\nSwitch#show startup-config \t\t\t\t\t#查看硬盘中配置文件\n\n恢复出厂设置\nSwitch#erase startup-config     #删除硬盘中配置文件\nSwitch#reload                   #重启交换机\n\n二、通过远程管理方式连接交换机（telnet\tssh）1.telnet\n属于应用层协议\t基于传输层TCP协议\t默认端口号：23\t采用明文密码方式\t不安全\t一般用于内网管理\n\n2.ssh\n属于应用层协议\t基于传输层TCP协议\t默认端口号：22\t采用秘闻密码方式\t相对安全\t一般用于跨互联网管理以及远程管理linux操作系统\n\n3.操作过程telnet\n\n为交换机虚拟接口（vlan 1）配置IP\nSwitch(config)#int vlan 1                                 #进入vlan 1接口\nSwitch(config-if)#ip address [10.1.1.3] [255.255.255.0]   #配置ip与子网掩码\nSwitch(config-if)#no shutdown                             #开启端口\n\n配置设备连接终端\nSwitch(config)#line vty 0 [4]         #设置0-4个终端\nSwitch(config-line)#password [123]    #设置密码\nSwitch(config-line)#login             #启用登录\n\nSwitch(config)#username [abc] password [123]  #设置账号与密码\nSwitch(config)#line vty 0 [4]                 #设置0-4个终端\nSwitch(config-line)#login\tlocal               #启用账号密码登录\n\n设置特权模式密码\nSwitch(config)#enable password [123]\t\t#设置明文密码\nSwitch(config)#enable secret [123]\t\t\t#设置密文密码（优先级最高）\n\n应用\n\n\nssh\n\n为交换机虚拟接口（vlan 1）配置IP\nSwitch(config)#int vlan 1                                 #进入vlan 1接口\nSwitch(config-if)#ip address [10.1.1.3] [255.255.255.0]   #配置ip与子网掩码\nSwitch(config-if)#no shutdown                             #开启端口\n\n配置设备连接终端\nSwitch#show ip ssh                              #判断交换机是否支持ssh\nSwitch(config)#hostname [sw1]                   #改名（创建域名不能够使用默认名字）\nsw1(config)#ip domain-name [kcc.com]            #创建域名\nsw1(config)#crypto key generate rsa             #创建密钥对\nsw1(config)#ip ssh time-out [120]               #设置超时时间\nsw1(config)#ip ssh authentication-retries [3]   #设置密码输入次数\nSwitch(config)#username [abc] password [123]    #设置账号与密码\nSwitch(config)#line vty 0 [4]                   #设置0-4个终端\nSwitch(config-line)#login local                 #启用账号密码登录\n\n设置特权模式密码\nSwitch(config)#enable password [123]\t\t#设置明文密码\nSwitch(config)#enable secret [123]\t\t\t#设置密文密码（优先级最高）\n\n","slug":"交换机基本配置","date":"2022-06-29T07:52:19.000Z","categories_index":"网络安全,网络设备","tags_index":"网络安全,网络设备","author_index":"Kcxuao"},{"id":"293c17b4d2a4292133cc4d1ffd7f8725","title":"计算机网络","content":"计算机网络一、计算机网络的基本概念1.什么是计算机网络\n由两台或多台计算机通过网络设备进行串联（网络设备通过传输介质串联）\n网络设备\n计算机\n路由交换\n防火墙\n上网行为管理\n……\n\n\n传输介质\n双绞线（网线）5类、超5类、6类、7类\n光纤\n无线（2.4GHz、5GHz）\n\n\n\n\n\n2.计算机网络的目的\n\n\n\n\n\nTIP\n\n数据通信\n资源共享\n增加可靠性\n提高系统处理能力\n\n\n\n3.计算机网络发展历程\n第一阶段\n分组交换网络——-阿帕网（ARPAnet）\n\n\n第二阶段\n近80年代\n标志性事件：NSFnet\n关键性技术：TCP&#x2F;IP协议簇的提出\n\n\n第三阶段\n90年代：超文本链接网页（HTML）浏览器的出现\n标志性事件：浏览器\n关键性技术：万维网技术（www）\n\n\n\n二、常见的协议1.网络协议和标准\n协议：规则（计算机网络中通信的对等实体之间交换信息时所需要遵循的规则的集合）\n标准组织\nISO：国际标准化组织\nITU：国际电信联盟\nIEEE：电气和电子工程师协会\n…….\n\n\n\n2.网络分类\n\n\n\n\n\nTIP\n\n广域网：WAN、万维网、外网\n城域网：一个城市的网络\n局域网：LAN\n\n\n\n3.IEEE802局域网标准\n有线局域网：IEEE802.3\nIEEE802.3u：\t百兆快速以太网\nIEEE802.3z：    千兆光纤\nIEEE802.3ab：  千兆双绞线（超5类、6类）\nIEEE802.3ae：   万兆\nIEEE802.3ba：   十万兆\n\n\n无线局域网：IEEE802.11\nIEEE802.11a：最高速率54Mbps（5G）\nIEEE802.11b：最高速率11Mbps（2.4G）\nIEEE802.11g：最高速率54Mbps（2.4G）\nIEEE802.11n：最高速率600Mbps\n\n\n\n4.主流网络厂商\n网络通信设备厂商\n思科\n华为\n新华三（H3C）\n锐捷\n\n\n\n5.网络拓扑\n\n\n\n\n\nTIP\n\n星型网络拓扑\n树型网络拓扑\n环型网络拓扑\n网状型网络拓扑\n\n\n\n计算机网络参考模型一、OSI七层参考模型1.分层思想\n2.OSI参考模型\n\n物理层：二进制数转换传输的电信号或光信号（建立、维护、断开物理连接）\n数据链路层：建立逻辑链接，进行硬件地址（MAC地址）寻址、差错校验\n网络层：进行逻辑地址（IP地址）寻址，实现不同网络间的路径选择\n传输层：定义传输数据的协议端口号、流控、差错校验\n会话层：建立、管理、终止会话\n表示层：数据的表示、加密、压缩等\n应用层：将原始的数据转换为电脑能识别的二进制数\n\n二、TCP&#x2F;IP（传输控制协议&#x2F;网际协议）四层&#x2F;五层1.四层\n\n网络接口层\n网络层\n传输层\n应用层\n\n2.五层\n\n物理层\n数据链路层\n网络层\nIP：网际互连协议\nARP：地址解析协议\nRARP：逆地址解析协议\nICMP：网际控制报文协议\nIGMP：网际组管理协议\n\n\n传输层\nTCP：传输控制协议——传输稳定可靠\nUDP：用户数据协议——传输效率高\n\n\n应用层\nHTTP\nHTTPS\nSSH\nTELNET\nDNS\nPOP3\nIMAP\nTFTP\nFTP\nNTP\n…….\n\n\n\n物理层（网卡、传输介质）一、信号1.基本概念\n进行网络通信，线缆传递电信号，光纤传递光信号\n信息\n数据\n信号\n\n\n\n2.分类\n模拟信号\n表示连续变化的物理量所表示的信息\n\n\n数字信号\n表示离散的二进制数据所表示的信息\n\n\n\n二、传输介质1.同轴电缆\n用于网络传输，最高速率为10Mbps\n\n2.双绞线\n传输速率高、应用广、技术成熟、成本低\n屏蔽双绞线：    用于电磁干扰强的场景\n非屏蔽双绞线：用于无电磁干扰的场景\n以太网接口\nRJ-45接口（水晶头）\n\n\n连接规范\nT568A：白绿、绿、白橙、蓝、白蓝、橙、白棕、棕\nT568B：白橙、橙、白绿、蓝、白蓝、绿、白棕、棕\n标准网线（直通线）：两边同为T568A或T568B线序\n交叉网线：一边为T568A、一边为T568B\n全反线（console线）：一边网线接口，一边COM口或USB口\n\n\n分类\n5类：100Mbps\n超5类：1000Mbps\n6类：1000Mbps\n7类：10000Mbps\n\n\n\n3.光纤\n利用光的全反射原理、传输带宽高、距离远、抗干扰能力强\n光纤分类\n单模光纤：线芯窄，需要激光源\n多模光纤：线芯粗，可用激光源或发光二极管\n\n\n光纤接口\nFC\nSC\nLC\n\n\n\n4.网络接口控制器（网卡）NIC\n上网必须有网卡\n每一网卡都有一个全球唯一的身份标识——MAC地址，由48位二进制组成，通常表示为12位的16进制数\n技术点\n驱动程序\nI&#x2F;O技术\n\n\n分类\n标准网卡和PCMCIA\n\n\n\n","slug":"计算机网络","date":"2022-06-29T07:51:03.000Z","categories_index":"网络安全,网络原理","tags_index":"网络安全,网络原理","author_index":"Kcxuao"},{"id":"107064ba3046d491d5998851c1928ffe","title":"vue3简介","content":"Vue3快速上手\n\n\n\n1.Vue3简介\n2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）\n耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 \ngithub上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n2.Vue3带来了什么1.性能的提升\n打包大小减少41%\n\n初次渲染快55%, 更新渲染快133%\n\n内存减少54%\n……\n\n\n2.源码的升级\n使用Proxy代替defineProperty实现响应式\n\n重写虚拟DOM的实现和Tree-Shaking\n……\n\n\n3.拥抱TypeScript\nVue3可以更好的支持TypeScript\n\n4.新的特性\nComposition API（组合API）\n\nsetup配置\nref与reactive\nwatch与watchEffect\nprovide与inject\n……\n\n\n新的内置组件\n\nFragment \nTeleport\nSuspense\n\n\n其他改变\n\n新的生命周期钩子\ndata 选项应始终被声明为一个函数\n移除keyCode支持作为 v-on 的修饰符\n……\n\n\n\n一、创建Vue3.0工程1.使用 vue-cli 创建官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n\n2.使用 vite 创建官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\nvite官网：https://vitejs.cn\n\n什么是vite？—— 新一代前端构建工具。\n优势如下：\n开发环境中，无需打包操作，可快速的冷启动。\n轻量快速的热重载（HMR）。\n真正的按需编译，不再等待整个应用编译完成。\n\n\n传统构建 与 vite构建对比图\n\n\n## 创建工程\nnpm init vite-app &lt;project-name>\n## 进入工程目录\ncd &lt;project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n\n二、常用 Composition API官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n1.拉开序幕的setup\n理解：Vue3.0中一个新的配置项，值为一个函数。\nsetup是所有Composition API（组合API）“ 表演的舞台 ”。\n组件中所用到的：数据、方法等等，均要配置在setup中。\nsetup函数的两种返回值：\n若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n若返回一个渲染函数：则可以自定义渲染内容。（了解）\n\n\n注意点：\n尽量不要与Vue2.x配置混用\nVue2.x配置（data、methos、computed…）中可以访问到setup中的属性、方法。\n但在setup中不能访问到Vue2.x配置（data、methos、computed…）。\n如果有重名, setup优先。\n\n\nsetup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）\n\n\n\n2.ref函数\n作用: 定义一个响应式的数据\n语法: const xxx = ref(initValue) \n创建一个包含响应式数据的引用对象（reference对象，简称ref对象）。\nJS中操作数据： xxx.value\n模板中读取数据: 不需要.value，直接：&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;\n\n\n备注：\n接收的数据可以是：基本类型、也可以是对象类型。\n基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成的。\n对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数—— reactive函数。\n\n\n\n3.reactive函数\n作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用ref函数）\n语法：const 代理对象= reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy的实例对象，简称proxy对象）\nreactive定义的响应式数据是“深层次的”。\n内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n4.Vue3.0中的响应式原理vue2.x的响应式\n实现原理：\n\n对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持）。\n\n数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\nObject.defineProperty(data, 'count', &#123;\n    get () &#123;&#125;, \n    set () &#123;&#125;\n&#125;)\n\n\n存在问题：\n\n新增属性、删除属性, 界面不会更新。\n直接通过下标修改数组, 界面不会自动更新。\n\n\n\nVue3.0的响应式\n实现原理: \n\n通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n\n通过Reflect（反射）:  对源对象的属性进行操作。\n\nMDN文档中描述的Proxy与Reflect：\n\nProxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\nReflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\nnew Proxy(data, &#123;\n\t// 拦截读取属性值\n    get (target, prop) &#123;\n    \treturn Reflect.get(target, prop)\n    &#125;,\n    // 拦截设置属性值或添加新属性\n    set (target, prop, value) &#123;\n    \treturn Reflect.set(target, prop, value)\n    &#125;,\n    // 拦截删除属性\n    deleteProperty (target, prop) &#123;\n    \treturn Reflect.deleteProperty(target, prop)\n    &#125;\n&#125;)\n\nproxy.name = 'tom'   \n\n\n\n\n\n5.reactive对比ref\n从定义数据角度对比：\nref用来定义：基本类型数据。\nreactive用来定义：对象（或数组）类型数据。\n备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。\n\n\n从原理角度对比：\nref通过Object.defineProperty()的get与set来实现响应式（数据劫持）。\nreactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。\n\n\n从使用角度对比：\nref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。\nreactive定义的数据：操作数据与读取数据：均不需要.value。\n\n\n\n6.setup的两个注意点\nsetup执行的时机\n\n在beforeCreate之前执行一次，this是undefined。\n\n\nsetup的参数\n\nprops：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\ncontext：上下文对象\nattrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。\nslots: 收到的插槽内容, 相当于 this.$slots。\nemit: 分发自定义事件的函数, 相当于 this.$emit。\n\n\n\n\n\n7.计算属性与监视1.computed函数\n与Vue2.x中computed配置功能一致\n\n写法\nimport &#123;computed&#125; from 'vue'\n\nsetup()&#123;\n    ...\n\t//计算属性——简写\n    let fullName = computed(()=>&#123;\n        return person.firstName + '-' + person.lastName\n    &#125;)\n    //计算属性——完整\n    let fullName = computed(&#123;\n        get()&#123;\n            return person.firstName + '-' + person.lastName\n        &#125;,\n        set(value)&#123;\n            const nameArr = value.split('-')\n            person.firstName = nameArr[0]\n            person.lastName = nameArr[1]\n        &#125;\n    &#125;)\n&#125;\n\n2.watch函数\n与Vue2.x中watch配置功能一致\n\n两个小“坑”：\n\n监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。\n监视reactive定义的响应式数据中某个属性时：deep配置有效。\n\n//情况一：监视ref定义的响应式数据\nwatch(sum,(newValue,oldValue)=>&#123;\n\tconsole.log('sum变化了',newValue,oldValue)\n&#125;,&#123;immediate:true&#125;)\n\n//情况二：监视多个ref定义的响应式数据\nwatch([sum,msg],(newValue,oldValue)=>&#123;\n\tconsole.log('sum或msg变化了',newValue,oldValue)\n&#125;) \n\n/* 情况三：监视reactive定义的响应式数据\n\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n*/\nwatch(person,(newValue,oldValue)=>&#123;\n\tconsole.log('person变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:false&#125;) //此处的deep配置不再奏效\n\n//情况四：监视reactive定义的响应式数据中的某个属性\nwatch(()=>person.job,(newValue,oldValue)=>&#123;\n\tconsole.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:true&#125;) \n\n//情况五：监视reactive定义的响应式数据中的某些属性\nwatch([()=>person.job,()=>person.name],(newValue,oldValue)=>&#123;\n\tconsole.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:true&#125;)\n\n//特殊情况\nwatch(()=>person.job,(newValue,oldValue)=>&#123;\n    console.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;deep:true&#125;) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n\n3.watchEffect函数\nwatch的套路是：既要指明监视的属性，也要指明监视的回调。\n\nwatchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\nwatchEffect有点像computed：\n\n但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n\n//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\nwatchEffect(()=>&#123;\n    const x1 = sum.value\n    const x2 = person.age\n    console.log('watchEffect配置的回调执行了')\n&#125;)\n\n8.生命周期vue2.x的生命周期vue3.0的生命周期\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\nVue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\nbeforeDestroy改名为 beforeUnmount\ndestroyed改名为 unmounted\n\n\nVue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\nbeforeCreate&#x3D;&#x3D;&#x3D;&gt;setup()\ncreated&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;setup()\nbeforeMount &#x3D;&#x3D;&#x3D;&gt;onBeforeMount\nmounted&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onMounted\nbeforeUpdate&#x3D;&#x3D;&#x3D;&gt;onBeforeUpdate\nupdated &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUpdated\nbeforeUnmount &#x3D;&#x3D;&gt;onBeforeUnmount\nunmounted &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUnmounted\n\n\n\n9.自定义hook函数\n什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。\n\n类似于vue2.x中的mixin。\n\n自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n10.toRef\n作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n\n语法：const name = toRef(person,&#39;name&#39;)\n\n应用:   要将响应式对象中的某个属性单独提供给外部使用时。\n\n扩展：toRefs 与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)\n\n\n三、其它 Composition API1.shallowReactive 与 shallowRef\nshallowReactive：只处理对象最外层属性的响应式（浅响应式）。\n\nshallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n什么时候使用?\n\n如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。\n如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。\n\n\n\n2.readonly 与 shallowReadonly\nreadonly: 让一个响应式数据变为只读的（深只读）。\nshallowReadonly：让一个响应式数据变为只读的（浅只读）。\n应用场景: 不希望数据被修改时。\n\n3.toRaw 与 markRaw\ntoRaw：\n作用：将一个由reactive生成的响应式对象转为普通对象。\n使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n\n\nmarkRaw：\n作用：标记一个对象，使其永远不会再成为响应式对象。\n应用场景:\n有些值不应被设置为响应式的，例如复杂的第三方类库等。\n当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n\n\n\n\n4.customRef\n作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n实现防抖效果：\n&lt;template&gt;\n\t&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;\n\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n\timport &#123;ref,customRef&#125; from &#39;vue&#39;\n\texport default &#123;\n\t\tname:&#39;Demo&#39;,\n\t\tsetup()&#123;\n\t\t\t&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref\n\t\t\t&#x2F;&#x2F;自定义一个myRef\n\t\t\tfunction myRef(value,delay)&#123;\n\t\t\t\tlet timer\n\t\t\t\t&#x2F;&#x2F;通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)&#x3D;&gt;&#123;\n\t\t\t\t\treturn&#123;\n\t\t\t\t\t\tget()&#123;\n\t\t\t\t\t\t\ttrack() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tset(newValue)&#123;\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer &#x3D; setTimeout(()&#x3D;&gt;&#123;\n\t\t\t\t\t\t\t\tvalue &#x3D; newValue\n\t\t\t\t\t\t\t\ttrigger() &#x2F;&#x2F;告诉Vue去更新界面\n\t\t\t\t\t\t\t&#125;,delay)\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;)\n\t\t\t&#125;\n\t\t\tlet keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref\n\t\t\treturn &#123;\n\t\t\t\tkeyword\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;\n\n5.provide 与 inject\n\n\n作用：实现祖与后代组件间通信\n\n套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\n\n具体写法：\n\n祖组件中：\nsetup()&#123;\n\t......\n    let car = reactive(&#123;name:'奔驰',price:'40万'&#125;)\n    provide('car',car)\n    ......\n&#125;\n\n后代组件中：\nsetup(props,context)&#123;\n\t......\n    const car = inject('car')\n    return &#123;car&#125;\n\t......\n&#125;\n\n\n\n6.响应式数据的判断\nisRef: 检查一个值是否为一个 ref 对象\nisReactive: 检查一个对象是否是由 reactive 创建的响应式代理\nisReadonly: 检查一个对象是否是由 readonly 创建的只读代理\nisProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\n\n四、Composition API 的优势1.Options API 存在的问题使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n    \n\n\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.Composition API 的优势我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n五、新的组件1.Fragment\n在Vue2中: 组件必须有一个根标签\n在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n好处: 减少标签层级, 减小内存占用\n\n2.Teleport\n什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。\n&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;\n\t&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;\n\t\t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n\t\t\t&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;\n\t\t\t&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;teleport&gt;\n\n3.Suspense\n等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n使用步骤：\n\n异步引入组件\nimport &#123;defineAsyncComponent&#125; from 'vue'\nconst Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n\n使用Suspense包裹组件，并配置好default 与 fallback\n&lt;template&gt;\n\t&lt;div class&#x3D;&quot;app&quot;&gt;\n\t\t&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n\t\t&lt;Suspense&gt;\n\t\t\t&lt;template v-slot:default&gt;\n\t\t\t\t&lt;Child&#x2F;&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t\t&lt;template v-slot:fallback&gt;\n\t\t\t\t&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t&lt;&#x2F;Suspense&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n\n\n六、其他1.全局API的转移\nVue 2.x 有许多全局 API 和配置。\n\n例如：注册全局组件、注册全局指令等。\n//注册全局组件\nVue.component('MyButton', &#123;\n  data: () => (&#123;\n    count: 0\n  &#125;),\n  template: '&lt;button @click=\"count++\">Clicked &#123;&#123; count &#125;&#125; times.&lt;/button>'\n&#125;)\n\n//注册全局指令\nVue.directive('focus', &#123;\n  inserted: el => el.focus()\n&#125;\n\n\nVue3.0中对这些API做出了调整：\n\n将全局的API，即：Vue.xxx调整到应用实例（app）上\n\n\n\n2.x 全局 API（Vue）\n3.x 实例 API (app)\n\n\n\nVue.config.xxxx\napp.config.xxxx\n\n\nVue.config.productionTip\n移除\n\n\nVue.component\napp.component\n\n\nVue.directive\napp.directive\n\n\nVue.mixin\napp.mixin\n\n\nVue.use\napp.use\n\n\nVue.prototype\napp.config.globalProperties\n\n\n\n\n\n\n2.其他改变\ndata选项应始终被声明为一个函数。\n\n过度类名的更改：\n\nVue2.x写法\n.v-enter,\n.v-leave-to &#123;\n  opacity: 0;\n&#125;\n.v-leave,\n.v-enter-to &#123;\n  opacity: 1;\n&#125;\n\nVue3.x写法\n.v-enter-from,\n.v-leave-to &#123;\n  opacity: 0;\n&#125;\n\n.v-leave-from,\n.v-enter-to &#123;\n  opacity: 1;\n&#125;\n\n\n移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes\n\n移除v-on.native修饰符\n\n父组件中绑定事件\n&lt;my-component\n  v-on:close&#x3D;&quot;handleComponentEvent&quot;\n  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;\n&#x2F;&gt;\n\n子组件中声明自定义事件\n&lt;script&gt;\n  export default &#123;\n    emits: [&#39;close&#39;]\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n移除过滤器（filter）\n\n\n\n\n\n\n\n\n\n过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n……\n\n\n","slug":"vue3","date":"2022-06-29T07:50:03.000Z","categories_index":"WEB前端,Vue","tags_index":"前端,Vue","author_index":"Kcxuao"}]