[{"id":"2224ddd5978c9eca615a41bf4b8f087c","title":"MAC安装BurpSuit Pro","content":"前言今天重装了一下系统，导入快照的时候发现缺少了Burp，无奈只能重新下载安装。\n\n安装JavaBurp是基于Java环境的，首先我们需要安装java环境打开java官网\n我的电脑上已经存在java环境了，这里就不再赘述，需要的可以自行百度安装方法\n安装Burpsuit Pro1. 在官网安装最新的版本官方下载地址：https://portswigger.net/burp/releases\n\n\n​\t\t我是m1版本的电脑，所以这里我选择的是arm&#x2F;m1版本\n2. 安装完成后打开，提示我们需要输入许可证\n\n​\t\t关闭程序，开始绕过\n绕过注册网上大部分教学都是需要安装注册机进行绕过，每次启动都需要通过注册机运行，显得有些麻烦。\n我们这次选择一种新的方式进行启动，省去了每次启动程序都需要先打开注册机的繁琐操作\n1. 安装注册机与汉化包\n\n\n\n\n\nTIP\n\n安装地址：蓝奏云\n\n\n\n2. 将文件放入指定位置\n解压后将这三个文件粘贴到 &#x2F;Contents&#x2F;Resources&#x2F;app 目录下\n\n解压压缩包\n\n\n\n\n打开Burp显示包\n\n\n\n\n将解压后的文件粘贴至app目录下\n\n\n\n\n\n修改 &#x2F;Contents&#x2F;vmoptions.txt， 覆盖原本内容\n  # Enter one VM parameter per line\n# For example, to adjust the maximum memory usage to 512 MB, uncomment the following line:\n# -Xmx512m\n# To include another file, uncomment the following line:\n# -include-options [path to other .vmoption file]\n\n-noverify\n-javaagent:BurpSuiteLoader.jar\n-javaagent:BurpSuiteCn.jar\n-Dfile.encoding&#x3D;utf-8\n-XX:MaxRAMPercentage&#x3D;50\n-include-options user.vmoptions\n\n完成在程序坞中打开Burp， 这时已经可以正常打开，并且显示的也是汉化版本\n\n\n​\t\t\n注意\n\n\n\n\n\nTIP\n在新版的Burp中内置了谷歌浏览器，可以在这浏览器中完成抓包操作。\n抓取https无需再安装CA证书\n\n\n打开方法\n  \n\n\n数据包抓取成功\n","slug":"MAC安装BurpSuit Pro","date":"2022-07-04T05:12:54.000Z","categories_index":"网络安全,软件安装","tags_index":"网络安全,软件安装","author_index":"Kcxuao"},{"id":"818194b7b3f4262e361f3508ad11fd84","title":"Vue2使用moment处理时间戳","content":"\n\n\n\n\n\nPreface\n在前端开发中经常会遇到需要格式化时间戳的场景，但是原生js写起来略显复杂为了追求效率，我们可以选择一些第三方库来提高开发效率所以我们可以使用 moment 来处理时间戳\n\n\n\n1.安装moment.jsnpm install moment\n\n\n\n2.在组件中导入moment&lt;script>\n  import moment from 'moment'\n  export default &#123;&#125;\n&lt;/script>\n\n\n\n3.创建过滤器&lt;script>\n  import moment from 'moment'\n  export default &#123;\n    filters: &#123;\n      /*\n      * val: 需要处理的时间戳\n      * format('时间格式') \n      */\n    \tdateTime(val) &#123;\n      \treturn moment(val).format('YYYY-MM-DD HH:mm:ss')\n    \t&#125;\n  \t&#125;\n  &#125;\n&lt;/script>\n\n\n\n4.在HTML文档中处理时间戳&lt;!-- 通过插槽获取时间戳并使用过滤器处理时间戳 -->\n&lt;template slot-scope=\"&#123;row&#125;\">\n  &#123;&#123; row.add_time | dateTime &#125;&#125;\n&lt;/template>\n\n","slug":"Vue使用moment处理时间戳","date":"2022-06-30T12:30:14.000Z","categories_index":"WEB前端,Vue","tags_index":"前端,Vue","author_index":"Kcxuao"},{"id":"00e1daa9b6e7a95a8a71dff2678dcf11","title":"交换机基本配置","content":"交换机的基本配置1.掌握思科设备的命令行基础\n2.会对交换机进行基本配置\n会通过telnet和ssh对交换机进行远程管理\n一、思科设备命令行基础1.进入设备的命令行界面\n设备支持命令行\n查看设备上的端口，是否有console\n\n\n需要console线\n需要超级终端等软件连接\nputty\nsecret CRT\nxshell\n\n\n\n2.命令行基础\n思科设备上的命令行模式\n用户模式：查看统计信息（用的很少），用 “&gt;” 表示\n\n用户模式切换至特权模式\nSwitch&gt;enable\nen\t\t\t\t\t#简写\n\n\n特权模式：查看并修改设备配置（查看居多），用 “#” 表示\n\n特权模式切换至全局模式\nSwitch#configure terminal\nconf t\t\t#简写\n\n\n全局模式：针对设备整体配置参数，用“config”表示\n\n全局模式切换至接口模式\nSwitch(config)#interface [f0&#x2F;1]\nint [f0&#x2F;1]\t#简写\n\n\n接口模式：针对设备接口配置参数，用“config-if”表示\n\n控制台模式，用“config-line”表示\n\n全局模式切换至控制台模式\nSwitch(config)#line console 0\n\n\n注意\n\n进入对应模式只能一级一级进入\n\n返回对应模式\nexit\t\t#一级一级返回\nend\t\t\t#快速返回特权模式\n\n命令输入错误后会进入解析模式\nSwitch(config)#no ip domain-lookup \t\t#永不进行域名解析\n\n\n\n\n\n3.常见配置\n配置交换机主机名\nSwitch(config)#hostname\t[name]\t\t#设置交换机名\n\n查看MAC地址表\nSwitch#show mac-address-table \t\t#查看MAC地址表\n\n交换机双工模式查看与设置\nSwitch(config-if)#duplex ?                  #查看命令\n  auto  Enable AUTO duplex configuration    #自适应双工模式\n  full  Force full duplex operation         #全双工模式\n  half  Force half-duplex operation         #半双工模式\n  \nSwitch#show int [f0&#x2F;1]\t\t                #查看双工模式\n\n交换机接口速率\nSwitch(config-if)#speed ?\n\t10    Force 10 Mbps operation\t            #10Mb&#x2F;s\n  100   Force 100 Mbps operation\t\t        #100Mb&#x2F;s\n  1000  Force 100 Mbps operation\t\t        #1000Mb&#x2F;s\n  auto  Enable AUTO speed configuration\t\t\t#自适应速率\n\n配置console接口密码\nSwitch(config-line)#password [123]    #设置密码\nSwitch(config-line)#login             #启用登录\n\n查看配置文件\nSwitch#show running-config \t\t\t\t\t#查看内存中配置文件\nSwitch#show startup-config \t\t\t\t\t#查看硬盘中配置文件\n\n恢复出厂设置\nSwitch#erase startup-config     #删除硬盘中配置文件\nSwitch#reload                   #重启交换机\n\n二、通过远程管理方式连接交换机（telnet\tssh）1.telnet\n属于应用层协议\t基于传输层TCP协议\t默认端口号：23\t采用明文密码方式\t不安全\t一般用于内网管理\n\n2.ssh\n属于应用层协议\t基于传输层TCP协议\t默认端口号：22\t采用秘闻密码方式\t相对安全\t一般用于跨互联网管理以及远程管理linux操作系统\n\n3.操作过程telnet\n\n为交换机虚拟接口（vlan 1）配置IP\nSwitch(config)#int vlan 1                                 #进入vlan 1接口\nSwitch(config-if)#ip address [10.1.1.3] [255.255.255.0]   #配置ip与子网掩码\nSwitch(config-if)#no shutdown                             #开启端口\n\n配置设备连接终端\nSwitch(config)#line vty 0 [4]         #设置0-4个终端\nSwitch(config-line)#password [123]    #设置密码\nSwitch(config-line)#login             #启用登录\n\nSwitch(config)#username [abc] password [123]  #设置账号与密码\nSwitch(config)#line vty 0 [4]                 #设置0-4个终端\nSwitch(config-line)#login\tlocal               #启用账号密码登录\n\n设置特权模式密码\nSwitch(config)#enable password [123]\t\t#设置明文密码\nSwitch(config)#enable secret [123]\t\t\t#设置密文密码（优先级最高）\n\n应用\n\n\nssh\n\n为交换机虚拟接口（vlan 1）配置IP\nSwitch(config)#int vlan 1                                 #进入vlan 1接口\nSwitch(config-if)#ip address [10.1.1.3] [255.255.255.0]   #配置ip与子网掩码\nSwitch(config-if)#no shutdown                             #开启端口\n\n配置设备连接终端\nSwitch#show ip ssh                              #判断交换机是否支持ssh\nSwitch(config)#hostname [sw1]                   #改名（创建域名不能够使用默认名字）\nsw1(config)#ip domain-name [kcc.com]            #创建域名\nsw1(config)#crypto key generate rsa             #创建密钥对\nsw1(config)#ip ssh time-out [120]               #设置超时时间\nsw1(config)#ip ssh authentication-retries [3]   #设置密码输入次数\nSwitch(config)#username [abc] password [123]    #设置账号与密码\nSwitch(config)#line vty 0 [4]                   #设置0-4个终端\nSwitch(config-line)#login local                 #启用账号密码登录\n\n设置特权模式密码\nSwitch(config)#enable password [123]\t\t#设置明文密码\nSwitch(config)#enable secret [123]\t\t\t#设置密文密码（优先级最高）\n\n","slug":"交换机基本配置","date":"2022-06-29T07:52:19.000Z","categories_index":"网络安全,网络设备","tags_index":"网络安全,网络设备","author_index":"Kcxuao"},{"id":"293c17b4d2a4292133cc4d1ffd7f8725","title":"计算机网络","content":"计算机网络一、计算机网络的基本概念1.什么是计算机网络\n由两台或多台计算机通过网络设备进行串联（网络设备通过传输介质串联）\n网络设备\n计算机\n路由交换\n防火墙\n上网行为管理\n……\n\n\n传输介质\n双绞线（网线）5类、超5类、6类、7类\n光纤\n无线（2.4GHz、5GHz）\n\n\n\n\n\n2.计算机网络的目的\n\n\n\n\n\nTIP\n\n数据通信\n资源共享\n增加可靠性\n提高系统处理能力\n\n\n\n3.计算机网络发展历程\n第一阶段\n分组交换网络——-阿帕网（ARPAnet）\n\n\n第二阶段\n近80年代\n标志性事件：NSFnet\n关键性技术：TCP&#x2F;IP协议簇的提出\n\n\n第三阶段\n90年代：超文本链接网页（HTML）浏览器的出现\n标志性事件：浏览器\n关键性技术：万维网技术（www）\n\n\n\n二、常见的协议1.网络协议和标准\n协议：规则（计算机网络中通信的对等实体之间交换信息时所需要遵循的规则的集合）\n标准组织\nISO：国际标准化组织\nITU：国际电信联盟\nIEEE：电气和电子工程师协会\n…….\n\n\n\n2.网络分类\n\n\n\n\n\nTIP\n\n广域网：WAN、万维网、外网\n城域网：一个城市的网络\n局域网：LAN\n\n\n\n3.IEEE802局域网标准\n有线局域网：IEEE802.3\nIEEE802.3u：\t百兆快速以太网\nIEEE802.3z：    千兆光纤\nIEEE802.3ab：  千兆双绞线（超5类、6类）\nIEEE802.3ae：   万兆\nIEEE802.3ba：   十万兆\n\n\n无线局域网：IEEE802.11\nIEEE802.11a：最高速率54Mbps（5G）\nIEEE802.11b：最高速率11Mbps（2.4G）\nIEEE802.11g：最高速率54Mbps（2.4G）\nIEEE802.11n：最高速率600Mbps\n\n\n\n4.主流网络厂商\n网络通信设备厂商\n思科\n华为\n新华三（H3C）\n锐捷\n\n\n\n5.网络拓扑\n\n\n\n\n\nTIP\n\n星型网络拓扑\n树型网络拓扑\n环型网络拓扑\n网状型网络拓扑\n\n\n\n计算机网络参考模型一、OSI七层参考模型1.分层思想\n2.OSI参考模型\n\n物理层：二进制数转换传输的电信号或光信号（建立、维护、断开物理连接）\n数据链路层：建立逻辑链接，进行硬件地址（MAC地址）寻址、差错校验\n网络层：进行逻辑地址（IP地址）寻址，实现不同网络间的路径选择\n传输层：定义传输数据的协议端口号、流控、差错校验\n会话层：建立、管理、终止会话\n表示层：数据的表示、加密、压缩等\n应用层：将原始的数据转换为电脑能识别的二进制数\n\n二、TCP&#x2F;IP（传输控制协议&#x2F;网际协议）四层&#x2F;五层1.四层\n\n网络接口层\n网络层\n传输层\n应用层\n\n2.五层\n\n物理层\n数据链路层\n网络层\nIP：网际互连协议\nARP：地址解析协议\nRARP：逆地址解析协议\nICMP：网际控制报文协议\nIGMP：网际组管理协议\n\n\n传输层\nTCP：传输控制协议——传输稳定可靠\nUDP：用户数据协议——传输效率高\n\n\n应用层\nHTTP\nHTTPS\nSSH\nTELNET\nDNS\nPOP3\nIMAP\nTFTP\nFTP\nNTP\n…….\n\n\n\n物理层（网卡、传输介质）一、信号1.基本概念\n进行网络通信，线缆传递电信号，光纤传递光信号\n信息\n数据\n信号\n\n\n\n2.分类\n模拟信号\n表示连续变化的物理量所表示的信息\n\n\n数字信号\n表示离散的二进制数据所表示的信息\n\n\n\n二、传输介质1.同轴电缆\n用于网络传输，最高速率为10Mbps\n\n2.双绞线\n传输速率高、应用广、技术成熟、成本低\n屏蔽双绞线：    用于电磁干扰强的场景\n非屏蔽双绞线：用于无电磁干扰的场景\n以太网接口\nRJ-45接口（水晶头）\n\n\n连接规范\nT568A：白绿、绿、白橙、蓝、白蓝、橙、白棕、棕\nT568B：白橙、橙、白绿、蓝、白蓝、绿、白棕、棕\n标准网线（直通线）：两边同为T568A或T568B线序\n交叉网线：一边为T568A、一边为T568B\n全反线（console线）：一边网线接口，一边COM口或USB口\n\n\n分类\n5类：100Mbps\n超5类：1000Mbps\n6类：1000Mbps\n7类：10000Mbps\n\n\n\n3.光纤\n利用光的全反射原理、传输带宽高、距离远、抗干扰能力强\n光纤分类\n单模光纤：线芯窄，需要激光源\n多模光纤：线芯粗，可用激光源或发光二极管\n\n\n光纤接口\nFC\nSC\nLC\n\n\n\n4.网络接口控制器（网卡）NIC\n上网必须有网卡\n每一网卡都有一个全球唯一的身份标识——MAC地址，由48位二进制组成，通常表示为12位的16进制数\n技术点\n驱动程序\nI&#x2F;O技术\n\n\n分类\n标准网卡和PCMCIA\n\n\n\n","slug":"计算机网络","date":"2022-06-29T07:51:03.000Z","categories_index":"网络安全,网络原理","tags_index":"网络安全,网络原理","author_index":"Kcxuao"},{"id":"107064ba3046d491d5998851c1928ffe","title":"vue3简介","content":"Vue3快速上手\n\n\n\n1.Vue3简介\n2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）\n耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 \ngithub上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n2.Vue3带来了什么1.性能的提升\n打包大小减少41%\n\n初次渲染快55%, 更新渲染快133%\n\n内存减少54%\n……\n\n\n2.源码的升级\n使用Proxy代替defineProperty实现响应式\n\n重写虚拟DOM的实现和Tree-Shaking\n……\n\n\n3.拥抱TypeScript\nVue3可以更好的支持TypeScript\n\n4.新的特性\nComposition API（组合API）\n\nsetup配置\nref与reactive\nwatch与watchEffect\nprovide与inject\n……\n\n\n新的内置组件\n\nFragment \nTeleport\nSuspense\n\n\n其他改变\n\n新的生命周期钩子\ndata 选项应始终被声明为一个函数\n移除keyCode支持作为 v-on 的修饰符\n……\n\n\n\n一、创建Vue3.0工程1.使用 vue-cli 创建官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n\n2.使用 vite 创建官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\nvite官网：https://vitejs.cn\n\n什么是vite？—— 新一代前端构建工具。\n优势如下：\n开发环境中，无需打包操作，可快速的冷启动。\n轻量快速的热重载（HMR）。\n真正的按需编译，不再等待整个应用编译完成。\n\n\n传统构建 与 vite构建对比图\n\n\n## 创建工程\nnpm init vite-app &lt;project-name>\n## 进入工程目录\ncd &lt;project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n\n二、常用 Composition API官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n1.拉开序幕的setup\n理解：Vue3.0中一个新的配置项，值为一个函数。\nsetup是所有Composition API（组合API）“ 表演的舞台 ”。\n组件中所用到的：数据、方法等等，均要配置在setup中。\nsetup函数的两种返回值：\n若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n若返回一个渲染函数：则可以自定义渲染内容。（了解）\n\n\n注意点：\n尽量不要与Vue2.x配置混用\nVue2.x配置（data、methos、computed…）中可以访问到setup中的属性、方法。\n但在setup中不能访问到Vue2.x配置（data、methos、computed…）。\n如果有重名, setup优先。\n\n\nsetup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）\n\n\n\n2.ref函数\n作用: 定义一个响应式的数据\n语法: const xxx = ref(initValue) \n创建一个包含响应式数据的引用对象（reference对象，简称ref对象）。\nJS中操作数据： xxx.value\n模板中读取数据: 不需要.value，直接：&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;\n\n\n备注：\n接收的数据可以是：基本类型、也可以是对象类型。\n基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成的。\n对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数—— reactive函数。\n\n\n\n3.reactive函数\n作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用ref函数）\n语法：const 代理对象= reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy的实例对象，简称proxy对象）\nreactive定义的响应式数据是“深层次的”。\n内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n4.Vue3.0中的响应式原理vue2.x的响应式\n实现原理：\n\n对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持）。\n\n数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\nObject.defineProperty(data, 'count', &#123;\n    get () &#123;&#125;, \n    set () &#123;&#125;\n&#125;)\n\n\n存在问题：\n\n新增属性、删除属性, 界面不会更新。\n直接通过下标修改数组, 界面不会自动更新。\n\n\n\nVue3.0的响应式\n实现原理: \n\n通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n\n通过Reflect（反射）:  对源对象的属性进行操作。\n\nMDN文档中描述的Proxy与Reflect：\n\nProxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\nReflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\nnew Proxy(data, &#123;\n\t// 拦截读取属性值\n    get (target, prop) &#123;\n    \treturn Reflect.get(target, prop)\n    &#125;,\n    // 拦截设置属性值或添加新属性\n    set (target, prop, value) &#123;\n    \treturn Reflect.set(target, prop, value)\n    &#125;,\n    // 拦截删除属性\n    deleteProperty (target, prop) &#123;\n    \treturn Reflect.deleteProperty(target, prop)\n    &#125;\n&#125;)\n\nproxy.name = 'tom'   \n\n\n\n\n\n5.reactive对比ref\n从定义数据角度对比：\nref用来定义：基本类型数据。\nreactive用来定义：对象（或数组）类型数据。\n备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。\n\n\n从原理角度对比：\nref通过Object.defineProperty()的get与set来实现响应式（数据劫持）。\nreactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。\n\n\n从使用角度对比：\nref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。\nreactive定义的数据：操作数据与读取数据：均不需要.value。\n\n\n\n6.setup的两个注意点\nsetup执行的时机\n\n在beforeCreate之前执行一次，this是undefined。\n\n\nsetup的参数\n\nprops：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\ncontext：上下文对象\nattrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。\nslots: 收到的插槽内容, 相当于 this.$slots。\nemit: 分发自定义事件的函数, 相当于 this.$emit。\n\n\n\n\n\n7.计算属性与监视1.computed函数\n与Vue2.x中computed配置功能一致\n\n写法\nimport &#123;computed&#125; from 'vue'\n\nsetup()&#123;\n    ...\n\t//计算属性——简写\n    let fullName = computed(()=>&#123;\n        return person.firstName + '-' + person.lastName\n    &#125;)\n    //计算属性——完整\n    let fullName = computed(&#123;\n        get()&#123;\n            return person.firstName + '-' + person.lastName\n        &#125;,\n        set(value)&#123;\n            const nameArr = value.split('-')\n            person.firstName = nameArr[0]\n            person.lastName = nameArr[1]\n        &#125;\n    &#125;)\n&#125;\n\n2.watch函数\n与Vue2.x中watch配置功能一致\n\n两个小“坑”：\n\n监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。\n监视reactive定义的响应式数据中某个属性时：deep配置有效。\n\n//情况一：监视ref定义的响应式数据\nwatch(sum,(newValue,oldValue)=>&#123;\n\tconsole.log('sum变化了',newValue,oldValue)\n&#125;,&#123;immediate:true&#125;)\n\n//情况二：监视多个ref定义的响应式数据\nwatch([sum,msg],(newValue,oldValue)=>&#123;\n\tconsole.log('sum或msg变化了',newValue,oldValue)\n&#125;) \n\n/* 情况三：监视reactive定义的响应式数据\n\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n*/\nwatch(person,(newValue,oldValue)=>&#123;\n\tconsole.log('person变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:false&#125;) //此处的deep配置不再奏效\n\n//情况四：监视reactive定义的响应式数据中的某个属性\nwatch(()=>person.job,(newValue,oldValue)=>&#123;\n\tconsole.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:true&#125;) \n\n//情况五：监视reactive定义的响应式数据中的某些属性\nwatch([()=>person.job,()=>person.name],(newValue,oldValue)=>&#123;\n\tconsole.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;immediate:true,deep:true&#125;)\n\n//特殊情况\nwatch(()=>person.job,(newValue,oldValue)=>&#123;\n    console.log('person的job变化了',newValue,oldValue)\n&#125;,&#123;deep:true&#125;) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n\n3.watchEffect函数\nwatch的套路是：既要指明监视的属性，也要指明监视的回调。\n\nwatchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\nwatchEffect有点像computed：\n\n但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n\n//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\nwatchEffect(()=>&#123;\n    const x1 = sum.value\n    const x2 = person.age\n    console.log('watchEffect配置的回调执行了')\n&#125;)\n\n8.生命周期vue2.x的生命周期vue3.0的生命周期\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\nVue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\nbeforeDestroy改名为 beforeUnmount\ndestroyed改名为 unmounted\n\n\nVue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\nbeforeCreate&#x3D;&#x3D;&#x3D;&gt;setup()\ncreated&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;setup()\nbeforeMount &#x3D;&#x3D;&#x3D;&gt;onBeforeMount\nmounted&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onMounted\nbeforeUpdate&#x3D;&#x3D;&#x3D;&gt;onBeforeUpdate\nupdated &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUpdated\nbeforeUnmount &#x3D;&#x3D;&gt;onBeforeUnmount\nunmounted &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUnmounted\n\n\n\n9.自定义hook函数\n什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。\n\n类似于vue2.x中的mixin。\n\n自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n10.toRef\n作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n\n语法：const name = toRef(person,&#39;name&#39;)\n\n应用:   要将响应式对象中的某个属性单独提供给外部使用时。\n\n扩展：toRefs 与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)\n\n\n三、其它 Composition API1.shallowReactive 与 shallowRef\nshallowReactive：只处理对象最外层属性的响应式（浅响应式）。\n\nshallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n什么时候使用?\n\n如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。\n如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。\n\n\n\n2.readonly 与 shallowReadonly\nreadonly: 让一个响应式数据变为只读的（深只读）。\nshallowReadonly：让一个响应式数据变为只读的（浅只读）。\n应用场景: 不希望数据被修改时。\n\n3.toRaw 与 markRaw\ntoRaw：\n作用：将一个由reactive生成的响应式对象转为普通对象。\n使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n\n\nmarkRaw：\n作用：标记一个对象，使其永远不会再成为响应式对象。\n应用场景:\n有些值不应被设置为响应式的，例如复杂的第三方类库等。\n当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n\n\n\n\n4.customRef\n作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n实现防抖效果：\n&lt;template&gt;\n\t&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;\n\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n\timport &#123;ref,customRef&#125; from &#39;vue&#39;\n\texport default &#123;\n\t\tname:&#39;Demo&#39;,\n\t\tsetup()&#123;\n\t\t\t&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref\n\t\t\t&#x2F;&#x2F;自定义一个myRef\n\t\t\tfunction myRef(value,delay)&#123;\n\t\t\t\tlet timer\n\t\t\t\t&#x2F;&#x2F;通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)&#x3D;&gt;&#123;\n\t\t\t\t\treturn&#123;\n\t\t\t\t\t\tget()&#123;\n\t\t\t\t\t\t\ttrack() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tset(newValue)&#123;\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer &#x3D; setTimeout(()&#x3D;&gt;&#123;\n\t\t\t\t\t\t\t\tvalue &#x3D; newValue\n\t\t\t\t\t\t\t\ttrigger() &#x2F;&#x2F;告诉Vue去更新界面\n\t\t\t\t\t\t\t&#125;,delay)\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;)\n\t\t\t&#125;\n\t\t\tlet keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref\n\t\t\treturn &#123;\n\t\t\t\tkeyword\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;\n\n5.provide 与 inject\n\n\n作用：实现祖与后代组件间通信\n\n套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\n\n具体写法：\n\n祖组件中：\nsetup()&#123;\n\t......\n    let car = reactive(&#123;name:'奔驰',price:'40万'&#125;)\n    provide('car',car)\n    ......\n&#125;\n\n后代组件中：\nsetup(props,context)&#123;\n\t......\n    const car = inject('car')\n    return &#123;car&#125;\n\t......\n&#125;\n\n\n\n6.响应式数据的判断\nisRef: 检查一个值是否为一个 ref 对象\nisReactive: 检查一个对象是否是由 reactive 创建的响应式代理\nisReadonly: 检查一个对象是否是由 readonly 创建的只读代理\nisProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\n\n四、Composition API 的优势1.Options API 存在的问题使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n    \n\n\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.Composition API 的优势我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n五、新的组件1.Fragment\n在Vue2中: 组件必须有一个根标签\n在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n好处: 减少标签层级, 减小内存占用\n\n2.Teleport\n什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。\n&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;\n\t&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;\n\t\t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n\t\t\t&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;\n\t\t\t&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;teleport&gt;\n\n3.Suspense\n等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n使用步骤：\n\n异步引入组件\nimport &#123;defineAsyncComponent&#125; from 'vue'\nconst Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n\n使用Suspense包裹组件，并配置好default 与 fallback\n&lt;template&gt;\n\t&lt;div class&#x3D;&quot;app&quot;&gt;\n\t\t&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n\t\t&lt;Suspense&gt;\n\t\t\t&lt;template v-slot:default&gt;\n\t\t\t\t&lt;Child&#x2F;&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t\t&lt;template v-slot:fallback&gt;\n\t\t\t\t&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t&lt;&#x2F;Suspense&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n\n\n六、其他1.全局API的转移\nVue 2.x 有许多全局 API 和配置。\n\n例如：注册全局组件、注册全局指令等。\n//注册全局组件\nVue.component('MyButton', &#123;\n  data: () => (&#123;\n    count: 0\n  &#125;),\n  template: '&lt;button @click=\"count++\">Clicked &#123;&#123; count &#125;&#125; times.&lt;/button>'\n&#125;)\n\n//注册全局指令\nVue.directive('focus', &#123;\n  inserted: el => el.focus()\n&#125;\n\n\nVue3.0中对这些API做出了调整：\n\n将全局的API，即：Vue.xxx调整到应用实例（app）上\n\n\n\n2.x 全局 API（Vue）\n3.x 实例 API (app)\n\n\n\nVue.config.xxxx\napp.config.xxxx\n\n\nVue.config.productionTip\n移除\n\n\nVue.component\napp.component\n\n\nVue.directive\napp.directive\n\n\nVue.mixin\napp.mixin\n\n\nVue.use\napp.use\n\n\nVue.prototype\napp.config.globalProperties\n\n\n\n\n\n\n2.其他改变\ndata选项应始终被声明为一个函数。\n\n过度类名的更改：\n\nVue2.x写法\n.v-enter,\n.v-leave-to &#123;\n  opacity: 0;\n&#125;\n.v-leave,\n.v-enter-to &#123;\n  opacity: 1;\n&#125;\n\nVue3.x写法\n.v-enter-from,\n.v-leave-to &#123;\n  opacity: 0;\n&#125;\n\n.v-leave-from,\n.v-enter-to &#123;\n  opacity: 1;\n&#125;\n\n\n移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes\n\n移除v-on.native修饰符\n\n父组件中绑定事件\n&lt;my-component\n  v-on:close&#x3D;&quot;handleComponentEvent&quot;\n  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;\n&#x2F;&gt;\n\n子组件中声明自定义事件\n&lt;script&gt;\n  export default &#123;\n    emits: [&#39;close&#39;]\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n移除过滤器（filter）\n\n\n\n\n\n\n\n\n\n过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n……\n\n\n","slug":"vue3","date":"2022-06-29T07:50:03.000Z","categories_index":"WEB前端,Vue","tags_index":"前端,Vue","author_index":"Kcxuao"}]