{"title":"vue","uid":"0598fa03d199e4e0c3e0cf0c423b8caf","slug":"vue","date":"2022-06-29T07:50:03.000Z","updated":"2022-06-29T08:15:22.722Z","comments":true,"path":"api/articles/vue.json","keywords":null,"cover":[],"content":"<h1 id=\"Vue3快速上手\"><a href=\"#Vue3快速上手\" class=\"headerlink\" title=\"Vue3快速上手\"></a>Vue3快速上手</h1><img src=\"https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\" style=\"width:200px\" />\n\n\n\n<h2 id=\"1-Vue3简介\"><a href=\"#1-Vue3简介\" class=\"headerlink\" title=\"1.Vue3简介\"></a>1.Vue3简介</h2><ul>\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\n<li>耗时2年多、<a href=\"https://github.com/vuejs/vue-next/graphs/commit-activity\">2600+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">30+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/vue-next/graphs/contributors\">99位贡献者</a> </li>\n<li>github上的tags地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\n</ul>\n<h2 id=\"2-Vue3带来了什么\"><a href=\"#2-Vue3带来了什么\" class=\"headerlink\" title=\"2.Vue3带来了什么\"></a>2.Vue3带来了什么</h2><h3 id=\"1-性能的提升\"><a href=\"#1-性能的提升\" class=\"headerlink\" title=\"1.性能的提升\"></a>1.性能的提升</h3><ul>\n<li><p>打包大小减少41%</p>\n</li>\n<li><p>初次渲染快55%, 更新渲染快133%</p>\n</li>\n<li><p>内存减少54%</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"2-源码的升级\"><a href=\"#2-源码的升级\" class=\"headerlink\" title=\"2.源码的升级\"></a>2.源码的升级</h3><ul>\n<li><p>使用Proxy代替defineProperty实现响应式</p>\n</li>\n<li><p>重写虚拟DOM的实现和Tree-Shaking</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"3-拥抱TypeScript\"><a href=\"#3-拥抱TypeScript\" class=\"headerlink\" title=\"3.拥抱TypeScript\"></a>3.拥抱TypeScript</h3><ul>\n<li>Vue3可以更好的支持TypeScript</li>\n</ul>\n<h3 id=\"4-新的特性\"><a href=\"#4-新的特性\" class=\"headerlink\" title=\"4.新的特性\"></a>4.新的特性</h3><ol>\n<li><p>Composition API（组合API）</p>\n<ul>\n<li>setup配置</li>\n<li>ref与reactive</li>\n<li>watch与watchEffect</li>\n<li>provide与inject</li>\n<li>……</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment </li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除keyCode支持作为 v-on 的修饰符</li>\n<li>……</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"一、创建Vue3-0工程\"><a href=\"#一、创建Vue3-0工程\" class=\"headerlink\" title=\"一、创建Vue3.0工程\"></a>一、创建Vue3.0工程</h1><h2 id=\"1-使用-vue-cli-创建\"><a href=\"#1-使用-vue-cli-创建\" class=\"headerlink\" title=\"1.使用 vue-cli 创建\"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue --version\n<span class=\"token comment\">## 安装或者升级你的@vue/cli</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @vue/cli\n<span class=\"token comment\">## 创建</span>\nvue create vue_test\n<span class=\"token comment\">## 启动</span>\n<span class=\"token builtin class-name\">cd</span> vue_test\n<span class=\"token function\">npm</span> run serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-使用-vite-创建\"><a href=\"#2-使用-vite-创建\" class=\"headerlink\" title=\"2.使用 vite 创建\"></a>2.使用 vite 创建</h2><p>官方文档：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>\n<p>vite官网：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a></p>\n<ul>\n<li>什么是vite？—— 新一代前端构建工具。</li>\n<li>优势如下：<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite构建对比图</li>\n</ul>\n<p><img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">## 创建工程</span>\n<span class=\"token function\">npm</span> init vite-app <span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span>\n<span class=\"token comment\">## 进入工程目录</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span>\n<span class=\"token comment\">## 安装依赖</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token comment\">## 运行</span>\n<span class=\"token function\">npm</span> run dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"二、常用-Composition-API\"><a href=\"#二、常用-Composition-API\" class=\"headerlink\" title=\"二、常用 Composition API\"></a>二、常用 Composition API</h1><p>官方文档: <a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>\n<h2 id=\"1-拉开序幕的setup\"><a href=\"#1-拉开序幕的setup\" class=\"headerlink\" title=\"1.拉开序幕的setup\"></a>1.拉开序幕的setup</h2><ol>\n<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>\n<li>setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>\n<li>setup函数的两种返回值：<ol>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：<ol>\n<li>尽量不要与Vue2.x配置混用<ul>\n<li>Vue2.x配置（data、methos、computed…）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。</li>\n<li>但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>\n<li>如果有重名, setup优先。</li>\n</ul>\n</li>\n<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-ref函数\"><a href=\"#2-ref函数\" class=\"headerlink\" title=\"2.ref函数\"></a>2.ref函数</h2><ul>\n<li>作用: 定义一个响应式的数据</li>\n<li>语法: <code>const xxx = ref(initValue)</code> <ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。</li>\n<li>JS中操作数据： <code>xxx.value</code></li>\n<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-reactive函数\"><a href=\"#3-reactive函数\" class=\"headerlink\" title=\"3.reactive函数\"></a>3.reactive函数</h2><ul>\n<li>作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>\n<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>\n<li>reactive定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"4-Vue3-0中的响应式原理\"><a href=\"#4-Vue3-0中的响应式原理\" class=\"headerlink\" title=\"4.Vue3.0中的响应式原理\"></a>4.Vue3.0中的响应式原理</h2><h3 id=\"vue2-x的响应式\"><a href=\"#vue2-x的响应式\" class=\"headerlink\" title=\"vue2.x的响应式\"></a>vue2.x的响应式</h3><ul>\n<li><p>实现原理：</p>\n<ul>\n<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性, 界面不会更新。</li>\n<li>直接通过下标修改数组, 界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue3-0的响应式\"><a href=\"#Vue3-0的响应式\" class=\"headerlink\" title=\"Vue3.0的响应式\"></a>Vue3.0的响应式</h3><ul>\n<li><p>实现原理: </p>\n<ul>\n<li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p>\n</li>\n<li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p>\n</li>\n<li><p>MDN文档中描述的Proxy与Reflect：</p>\n<ul>\n<li><p>Proxy：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n</li>\n<li><p>Reflect：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 拦截读取属性值</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 拦截设置属性值或添加新属性</span>\n    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 拦截删除属性</span>\n    <span class=\"token function\">deleteProperty</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nproxy<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'tom'</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-reactive对比ref\"><a href=\"#5-reactive对比ref\" class=\"headerlink\" title=\"5.reactive对比ref\"></a>5.reactive对比ref</h2><ul>\n<li>从定义数据角度对比：<ul>\n<li>ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li>reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li>备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：<ul>\n<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>\n<li>reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：<ul>\n<li>ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong><code>.value</code>。</li>\n<li>reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong><code>.value</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-setup的两个注意点\"><a href=\"#6-setup的两个注意点\" class=\"headerlink\" title=\"6.setup的两个注意点\"></a>6.setup的两个注意点</h2><ul>\n<li><p>setup执行的时机</p>\n<ul>\n<li>在beforeCreate之前执行一次，this是undefined。</li>\n</ul>\n</li>\n<li><p>setup的参数</p>\n<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>\n<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>\n<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-计算属性与监视\"><a href=\"#7-计算属性与监视\" class=\"headerlink\" title=\"7.计算属性与监视\"></a>7.计算属性与监视</h2><h3 id=\"1-computed函数\"><a href=\"#1-computed函数\" class=\"headerlink\" title=\"1.computed函数\"></a>1.computed函数</h3><ul>\n<li><p>与Vue2.x中computed配置功能一致</p>\n</li>\n<li><p>写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>computed<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>\n\t<span class=\"token comment\">//计算属性——简写</span>\n    <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>lastName\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//计算属性——完整</span>\n    <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>lastName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> nameArr <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n            person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> nameArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            person<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> nameArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-watch函数\"><a href=\"#2-watch函数\" class=\"headerlink\" title=\"2.watch函数\"></a>2.watch函数</h3><ul>\n<li><p>与Vue2.x中watch配置功能一致</p>\n</li>\n<li><p>两个小“坑”：</p>\n<ul>\n<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>\n<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//情况一：监视ref定义的响应式数据</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//情况二：监视多个ref定义的响应式数据</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum或msg变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">/* 情况三：监视reactive定义的响应式数据\n\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n*/</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//此处的deep配置不再奏效</span>\n\n<span class=\"token comment\">//情况四：监视reactive定义的响应式数据中的某个属性</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">//情况五：监视reactive定义的响应式数据中的某些属性</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//特殊情况</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"3-watchEffect函数\"><a href=\"#3-watchEffect函数\" class=\"headerlink\" title=\"3.watchEffect函数\"></a>3.watchEffect函数</h3><ul>\n<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li><p>watchEffect有点像computed：</p>\n<ul>\n<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span>\n<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> x1 <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">const</span> x2 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'watchEffect配置的回调执行了'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h2><div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>1</p>\n<ul>\n<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>\n<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>\n<li><code>destroyed</code>改名为 <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>\n<li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>\n<li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>\n<li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li>\n<li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li>\n<li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li>\n<li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li>\n<li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li>\n<li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-自定义hook函数\"><a href=\"#9-自定义hook函数\" class=\"headerlink\" title=\"9.自定义hook函数\"></a>9.自定义hook函数</h2><ul>\n<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>\n</li>\n<li><p>类似于vue2.x中的mixin。</p>\n</li>\n<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10.toRef\"></a>10.toRef</h2><ul>\n<li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p>\n</li>\n<li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p>\n</li>\n<li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p>\n</li>\n<li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p>\n</li>\n</ul>\n<h1 id=\"三、其它-Composition-API\"><a href=\"#三、其它-Composition-API\" class=\"headerlink\" title=\"三、其它 Composition API\"></a>三、其它 Composition API</h1><h2 id=\"1-shallowReactive-与-shallowRef\"><a href=\"#1-shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"1.shallowReactive 与 shallowRef\"></a>1.shallowReactive 与 shallowRef</h2><ul>\n<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\n</li>\n<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\n</li>\n<li><p>什么时候使用?</p>\n<ul>\n<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li>\n<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-readonly-与-shallowReadonly\"><a href=\"#2-readonly-与-shallowReadonly\" class=\"headerlink\" title=\"2.readonly 与 shallowReadonly\"></a>2.readonly 与 shallowReadonly</h2><ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h2 id=\"3-toRaw-与-markRaw\"><a href=\"#3-toRaw-与-markRaw\" class=\"headerlink\" title=\"3.toRaw 与 markRaw\"></a>3.toRaw 与 markRaw</h2><ul>\n<li>toRaw：<ul>\n<li>作用：将一个由<code>reactive</code>生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-customRef\"><a href=\"#4-customRef\" class=\"headerlink\" title=\"4.customRef\"></a>4.customRef</h2><ul>\n<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li><p>实现防抖效果：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;\n\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n\timport &#123;ref,customRef&#125; from &#39;vue&#39;\n\texport default &#123;\n\t\tname:&#39;Demo&#39;,\n\t\tsetup()&#123;\n\t\t\t&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref\n\t\t\t&#x2F;&#x2F;自定义一个myRef\n\t\t\tfunction myRef(value,delay)&#123;\n\t\t\t\tlet timer\n\t\t\t\t&#x2F;&#x2F;通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)&#x3D;&gt;&#123;\n\t\t\t\t\treturn&#123;\n\t\t\t\t\t\tget()&#123;\n\t\t\t\t\t\t\ttrack() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tset(newValue)&#123;\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer &#x3D; setTimeout(()&#x3D;&gt;&#123;\n\t\t\t\t\t\t\t\tvalue &#x3D; newValue\n\t\t\t\t\t\t\t\ttrigger() &#x2F;&#x2F;告诉Vue去更新界面\n\t\t\t\t\t\t\t&#125;,delay)\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;)\n\t\t\t&#125;\n\t\t\tlet keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref\n\t\t\treturn &#123;\n\t\t\t\tkeyword\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"5-provide-与-inject\"><a href=\"#5-provide-与-inject\" class=\"headerlink\" title=\"5.provide 与 inject\"></a>5.provide 与 inject</h2><img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n\n<ul>\n<li><p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>\n</li>\n<li><p>具体写法：</p>\n<ol>\n<li><p>祖组件中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n    <span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span><span class=\"token string\">'40万'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span>car<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>后代组件中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span>context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>car<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-响应式数据的判断\"><a href=\"#6-响应式数据的判断\" class=\"headerlink\" title=\"6.响应式数据的判断\"></a>6.响应式数据的判断</h2><ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>\n</ul>\n<h1 id=\"四、Composition-API-的优势\"><a href=\"#四、Composition-API-的优势\" class=\"headerlink\" title=\"四、Composition API 的优势\"></a>四、Composition API 的优势</h1><h2 id=\"1-Options-API-存在的问题\"><a href=\"#1-Options-API-存在的问题\" class=\"headerlink\" title=\"1.Options API 存在的问题\"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-Composition-API-的优势\"><a href=\"#2-Composition-API-的优势\" class=\"headerlink\" title=\"2.Composition API 的优势\"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"五、新的组件\"><a href=\"#五、新的组件\" class=\"headerlink\" title=\"五、新的组件\"></a>五、新的组件</h1><h2 id=\"1-Fragment\"><a href=\"#1-Fragment\" class=\"headerlink\" title=\"1.Fragment\"></a>1.Fragment</h2><ul>\n<li>在Vue2中: 组件必须有一个根标签</li>\n<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h2 id=\"2-Teleport\"><a href=\"#2-Teleport\" class=\"headerlink\" title=\"2.Teleport\"></a>2.Teleport</h2><ul>\n<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;\n\t&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;\n\t\t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n\t\t\t&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;\n\t\t\t&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;teleport&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"3-Suspense\"><a href=\"#3-Suspense\" class=\"headerlink\" title=\"3.Suspense\"></a>3.Suspense</h2><ul>\n<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li><p>使用步骤：</p>\n<ul>\n<li><p>异步引入组件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineAsyncComponent<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./components/Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;app&quot;&gt;\n\t\t&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n\t\t&lt;Suspense&gt;\n\t\t\t&lt;template v-slot:default&gt;\n\t\t\t\t&lt;Child&#x2F;&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t\t&lt;template v-slot:fallback&gt;\n\t\t\t\t&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;\n\t\t\t&lt;&#x2F;template&gt;\n\t\t&lt;&#x2F;Suspense&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h1><h2 id=\"1-全局API的转移\"><a href=\"#1-全局API的转移\" class=\"headerlink\" title=\"1.全局API的转移\"></a>1.全局API的转移</h2><ul>\n<li><p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li><p>例如：注册全局组件、注册全局指令等。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//注册全局组件</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyButton'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;button @click=\"count++\">Clicked &#123;&#123; count &#125;&#125; times.&lt;/button>'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//注册全局指令</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">inserted</span><span class=\"token operator\">:</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Vue3.0中对这些API做出了调整：</p>\n<ul>\n<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>\n<table>\n<thead>\n<tr>\n<th>2.x 全局 API（<code>Vue</code>）</th>\n<th>3.x 实例 API (<code>app</code>)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td><strong style=\"color:#DD5145\">移除</strong></td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-其他改变\"><a href=\"#2-其他改变\" class=\"headerlink\" title=\"2.其他改变\"></a>2.其他改变</h2><ul>\n<li><p>data选项应始终被声明为一个函数。</p>\n</li>\n<li><p>过度类名的更改：</p>\n<ul>\n<li><p>Vue2.x写法</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.v-enter,\n.v-leave-to</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.v-leave,\n.v-enter-to</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>Vue3.x写法</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.v-enter-from,\n.v-leave-to</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.v-leave-from,\n.v-enter-to</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong><code>v-on.native</code>修饰符</p>\n<ul>\n<li><p>父组件中绑定事件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;my-component\n  v-on:close&#x3D;&quot;handleComponentEvent&quot;\n  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;\n&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>子组件中声明自定义事件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script&gt;\n  export default &#123;\n    emits: [&#39;close&#39;]\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n","feature":true,"text":"Vue3快速上手 1.Vue3简介 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王） 耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 github上的tags地址：https://github.com/vuejs/v...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\"><span class=\"toc-text\">Vue3快速上手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Vue3%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.Vue3简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Vue3%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">2.Vue3带来了什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%80%A7%E8%83%BD%E7%9A%84%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">1.性能的提升</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%BA%90%E7%A0%81%E7%9A%84%E5%8D%87%E7%BA%A7\"><span class=\"toc-text\">2.源码的升级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8B%A5%E6%8A%B1TypeScript\"><span class=\"toc-text\">3.拥抱TypeScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%B0%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">4.新的特性</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BAVue3-0%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">一、创建Vue3.0工程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.使用 vue-cli 创建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-vite-%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">2.使用 vite 创建</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%B8%B8%E7%94%A8-Composition-API\"><span class=\"toc-text\">二、常用 Composition API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%8B%89%E5%BC%80%E5%BA%8F%E5%B9%95%E7%9A%84setup\"><span class=\"toc-text\">1.拉开序幕的setup</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-ref%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.ref函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-reactive%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.reactive函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Vue3-0%E4%B8%AD%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4.Vue3.0中的响应式原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue2-x%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F\"><span class=\"toc-text\">vue2.x的响应式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue3-0%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F\"><span class=\"toc-text\">Vue3.0的响应式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-reactive%E5%AF%B9%E6%AF%94ref\"><span class=\"toc-text\">5.reactive对比ref</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-setup%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">6.setup的两个注意点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E8%A7%86\"><span class=\"toc-text\">7.计算属性与监视</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-computed%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1.computed函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-watch%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.watch函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-watchEffect%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.watchEffect函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">8.生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E8%87%AA%E5%AE%9A%E4%B9%89hook%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">9.自定义hook函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-toRef\"><span class=\"toc-text\">10.toRef</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%85%B6%E5%AE%83-Composition-API\"><span class=\"toc-text\">三、其它 Composition API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-shallowReactive-%E4%B8%8E-shallowRef\"><span class=\"toc-text\">1.shallowReactive 与 shallowRef</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-readonly-%E4%B8%8E-shallowReadonly\"><span class=\"toc-text\">2.readonly 与 shallowReadonly</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-toRaw-%E4%B8%8E-markRaw\"><span class=\"toc-text\">3.toRaw 与 markRaw</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-customRef\"><span class=\"toc-text\">4.customRef</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-provide-%E4%B8%8E-inject\"><span class=\"toc-text\">5.provide 与 inject</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">6.响应式数据的判断</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Composition-API-%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">四、Composition API 的优势</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Options-API-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.Options API 存在的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Composition-API-%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">2.Composition API 的优势</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%96%B0%E7%9A%84%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">五、新的组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Fragment\"><span class=\"toc-text\">1.Fragment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Teleport\"><span class=\"toc-text\">2.Teleport</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Suspense\"><span class=\"toc-text\">3.Suspense</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">六、其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E5%B1%80API%E7%9A%84%E8%BD%AC%E7%A7%BB\"><span class=\"toc-text\">1.全局API的转移</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%85%B6%E4%BB%96%E6%94%B9%E5%8F%98\"><span class=\"toc-text\">2.其他改变</span></a></li></ol></li></ol>","author":{"name":"Kcxuao","slug":"blog-author","avatar":"https://img.gejiba.com/images/d12fcf0171d543a357ba257c1187033f.webp","link":"/","description":"路漫漫其修远兮，吾将上下而求索","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"qq":{"icon":"/img/qq.png","link":"http://wpa.qq.com/msgrd?v=3&uin=3187294487&site=qq&menu=yes"},"email":{"icon":"/img/email.png","link":"mailto:kcxuao@gmail.com"}}}},"mapped":true,"prev_post":{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计算机网络","date":"2022-06-29T07:51:03.000Z","updated":"2022-06-29T07:51:08.937Z","comments":true,"path":"api/articles/计算机网络.json","keywords":null,"cover":null,"text":"计算机网络一、计算机网络的基本概念1.什么是计算机网络 由两台或多台计算机通过网络设备进行串联（网络设备通过传输介质串联） 网络设备 计算机 路由交换 防火墙 上网行为管理 …… 传输介质 双绞线（网线）5类、超5类、6类、7类 光纤 无线（2.4GHz、5GHz） 2.计算机网...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Kcxuao","slug":"blog-author","avatar":"https://img.gejiba.com/images/d12fcf0171d543a357ba257c1187033f.webp","link":"/","description":"路漫漫其修远兮，吾将上下而求索","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"qq":{"icon":"/img/qq.png","link":"http://wpa.qq.com/msgrd?v=3&uin=3187294487&site=qq&menu=yes"},"email":{"icon":"/img/email.png","link":"mailto:kcxuao@gmail.com"}}}},"feature":true},"next_post":{}}